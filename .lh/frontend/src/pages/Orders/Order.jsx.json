{
    "sourceFile": "frontend/src/pages/Orders/Order.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1750346707475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750346746305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import Loader from \"../../components/Loader\";\r\n import {\r\n   useDeliverOrderMutation,\r\n   useGetOrderDetailsQuery,\r\n-  useGetPaypalClientIdQuery,\r\n+ \r\n   usePayOrderMutation,\r\n } from \"../../redux/api/orderApiSlice\";\r\n \r\n const Order = () => {\r\n"
                },
                {
                    "date": 1750346785042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   const [deliverOrder, { isLoading: loadingDeliver }] =\r\n     useDeliverOrderMutation();\r\n   const { userInfo } = useSelector((state) => state.auth);\r\n \r\n-  const [{ isPending }, paypalDispatch] = usePayPalScriptReducer();\r\n+ \r\n \r\n   const {\r\n     data: paypal,\r\n     isLoading: loadingPaPal,\r\n"
                },
                {
                    "date": 1750346790997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,10 @@\n   const { userInfo } = useSelector((state) => state.auth);\r\n \r\n  \r\n \r\n-  const {\r\n-    data: paypal,\r\n-    isLoading: loadingPaPal,\r\n-    error: errorPayPal,\r\n-  } = useGetPaypalClientIdQuery();\r\n \r\n+\r\n   useEffect(() => {\r\n     if (!errorPayPal && !loadingPaPal && paypal.clientId) {\r\n       const loadingPaPalScript = async () => {\r\n         paypalDispatch({\r\n"
                },
                {
                    "date": 1750346810375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,28 +30,9 @@\n  \r\n \r\n \r\n \r\n-  useEffect(() => {\r\n-    if (!errorPayPal && !loadingPaPal && paypal.clientId) {\r\n-      const loadingPaPalScript = async () => {\r\n-        paypalDispatch({\r\n-          type: \"resetOptions\",\r\n-          value: {\r\n-            \"client-id\": paypal.clientId,\r\n-            currency: \"USD\",\r\n-          },\r\n-        });\r\n-        paypalDispatch({ type: \"setLoadingStatus\", value: \"pending\" });\r\n-      };\r\n \r\n-      if (order && !order.isPaid) {\r\n-        if (!window.paypal) {\r\n-          loadingPaPalScript();\r\n-        }\r\n-      }\r\n-    }\r\n-  }, [errorPayPal, loadingPaPal, order, paypal, paypalDispatch]);\r\n \r\n   function onApprove(data, actions) {\r\n     return actions.order.capture().then(async function (details) {\r\n       try {\r\n"
                },
                {
                    "date": 1750346829556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,34 +32,10 @@\n \r\n \r\n \r\n \r\n-  function onApprove(data, actions) {\r\n-    return actions.order.capture().then(async function (details) {\r\n-      try {\r\n-        await payOrder({ orderId, details });\r\n-        refetch();\r\n-        toast.success(\"Order is paid\");\r\n-      } catch (error) {\r\n-        toast.error(error?.data?.message || error.message);\r\n-      }\r\n-    });\r\n-  }\r\n \r\n-  function createOrder(data, actions) {\r\n-    return actions.order\r\n-      .create({\r\n-        purchase_units: [{ amount: { value: order.totalPrice } }],\r\n-      })\r\n-      .then((orderID) => {\r\n-        return orderID;\r\n-      });\r\n-  }\r\n \r\n-  function onError(err) {\r\n-    toast.error(err.message);\r\n-  }\r\n-\r\n   const deliverHandler = async () => {\r\n     await deliverOrder(orderId);\r\n     refetch();\r\n   };\r\n"
                },
                {
                    "date": 1750346881556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,24 +145,9 @@\n         </div>\r\n \r\n         {!order.isPaid && (\r\n           <div>\r\n-            {loadingPay && <Loader />}{\" \"}\r\n-            {isPending ? (\r\n-              <Loader />\r\n-            ) : (\r\n-              <div>\r\n-                <div>\r\n-                  <PayPalButtons\r\n-                    createOrder={createOrder}\r\n-                    onApprove={onApprove}\r\n-                    onError={onError}\r\n-                  ></PayPalButtons>\r\n-                </div>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n+           \r\n \r\n         {loadingDeliver && <Loader />}\r\n         {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n           <div>\r\n"
                },
                {
                    "date": 1750347020211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { useEffect } from \"react\";\r\n import { Link, useParams } from \"react-router-dom\";\r\n-\r\n import { useSelector } from \"react-redux\";\r\n import { toast } from \"react-toastify\";\r\n+\r\n import Messsage from \"../../components/Message\";\r\n import Loader from \"../../components/Loader\";\r\n+\r\n import {\r\n   useDeliverOrderMutation,\r\n   useGetOrderDetailsQuery,\r\n- \r\n   usePayOrderMutation,\r\n } from \"../../redux/api/orderApiSlice\";\r\n \r\n const Order = () => {\r\n@@ -26,19 +26,51 @@\n   const [deliverOrder, { isLoading: loadingDeliver }] =\r\n     useDeliverOrderMutation();\r\n   const { userInfo } = useSelector((state) => state.auth);\r\n \r\n- \r\n+  const deliverHandler = async () => {\r\n+    await deliverOrder(orderId);\r\n+    refetch();\r\n+  };\r\n \r\n+  const handleRazorpaySuccess = async (paymentDetails) => {\r\n+    try {\r\n+      await payOrder({ orderId, details: paymentDetails });\r\n+      refetch();\r\n+      toast.success(\"Order paid successfully via Razorpay!\");\r\n+    } catch (err) {\r\n+      toast.error(err?.data?.message || err.message);\r\n+    }\r\n+  };\r\n \r\n+  const showRazorpay = async () => {\r\n+    const res = await fetch(\"/api/payment/create\", {\r\n+      method: \"POST\",\r\n+      headers: { \"Content-Type\": \"application/json\" },\r\n+      body: JSON.stringify({ amount: order.totalPrice }),\r\n+    });\r\n \r\n+    const data = await res.json();\r\n \r\n+    const options = {\r\n+      key: import.meta.env.VITE_RAZORPAY_KEY_ID,\r\n+      amount: data.amount,\r\n+      currency: data.currency,\r\n+      order_id: data.id,\r\n+      handler: function (response) {\r\n+        handleRazorpaySuccess(response);\r\n+      },\r\n+      prefill: {\r\n+        name: userInfo.username,\r\n+        email: userInfo.email,\r\n+      },\r\n+      theme: {\r\n+        color: \"#f472b6\",\r\n+      },\r\n+    };\r\n \r\n-\r\n-\r\n-  const deliverHandler = async () => {\r\n-    await deliverOrder(orderId);\r\n-    refetch();\r\n+    const razor = new window.Razorpay(options);\r\n+    razor.open();\r\n   };\r\n \r\n   return isLoading ? (\r\n     <Loader />\r\n@@ -61,9 +93,8 @@\n                     <th className=\"p-2\">Unit Price</th>\r\n                     <th className=\"p-2\">Total</th>\r\n                   </tr>\r\n                 </thead>\r\n-\r\n                 <tbody>\r\n                   {order.orderItems.map((item, index) => (\r\n                     <tr key={index}>\r\n                       <td className=\"p-2\">\r\n@@ -72,17 +103,17 @@\n                           alt={item.name}\r\n                           className=\"w-16 h-16 object-cover\"\r\n                         />\r\n                       </td>\r\n-\r\n                       <td className=\"p-2\">\r\n-                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n+                        <Link to={`/product/${item.product}`}>\r\n+                          {item.name}\r\n+                        </Link>\r\n                       </td>\r\n-\r\n                       <td className=\"p-2 text-center\">{item.qty}</td>\r\n                       <td className=\"p-2 text-center\">{item.price}</td>\r\n                       <td className=\"p-2 text-center\">\r\n-                        $ {(item.qty * item.price).toFixed(2)}\r\n+                        â‚¹ {(item.qty * item.price).toFixed(2)}\r\n                       </td>\r\n                     </tr>\r\n                   ))}\r\n                 </tbody>\r\n@@ -97,24 +128,20 @@\n           <h2 className=\"text-xl font-bold mb-2\">Shipping</h2>\r\n           <p className=\"mb-4 mt-4\">\r\n             <strong className=\"text-pink-500\">Order:</strong> {order._id}\r\n           </p>\r\n-\r\n           <p className=\"mb-4\">\r\n             <strong className=\"text-pink-500\">Name:</strong>{\" \"}\r\n             {order.user.username}\r\n           </p>\r\n-\r\n           <p className=\"mb-4\">\r\n             <strong className=\"text-pink-500\">Email:</strong> {order.user.email}\r\n           </p>\r\n-\r\n           <p className=\"mb-4\">\r\n             <strong className=\"text-pink-500\">Address:</strong>{\" \"}\r\n-            {order.shippingAddress.address}, {order.shippingAddress.city}{\" \"}\r\n+            {order.shippingAddress.address}, {order.shippingAddress.city},{\" \"}\r\n             {order.shippingAddress.postalCode}, {order.shippingAddress.country}\r\n           </p>\r\n-\r\n           <p className=\"mb-4\">\r\n             <strong className=\"text-pink-500\">Method:</strong>{\" \"}\r\n             {order.paymentMethod}\r\n           </p>\r\n@@ -128,33 +155,41 @@\n \r\n         <h2 className=\"text-xl font-bold mb-2 mt-[3rem]\">Order Summary</h2>\r\n         <div className=\"flex justify-between mb-2\">\r\n           <span>Items</span>\r\n-          <span>$ {order.itemsPrice}</span>\r\n+          <span>â‚¹ {order.itemsPrice}</span>\r\n         </div>\r\n         <div className=\"flex justify-between mb-2\">\r\n           <span>Shipping</span>\r\n-          <span>$ {order.shippingPrice}</span>\r\n+          <span>â‚¹ {order.shippingPrice}</span>\r\n         </div>\r\n         <div className=\"flex justify-between mb-2\">\r\n           <span>Tax</span>\r\n-          <span>$ {order.taxPrice}</span>\r\n+          <span>â‚¹ {order.taxPrice}</span>\r\n         </div>\r\n         <div className=\"flex justify-between mb-2\">\r\n           <span>Total</span>\r\n-          <span>$ {order.totalPrice}</span>\r\n+          <span>â‚¹ {order.totalPrice}</span>\r\n         </div>\r\n \r\n         {!order.isPaid && (\r\n-          <div>\r\n-           \r\n+          <div className=\"mt-4\">\r\n+            {loadingPay && <Loader />}\r\n+            <button\r\n+              onClick={showRazorpay}\r\n+              className=\"bg-pink-500 text-white w-full py-2\"\r\n+            >\r\n+              Pay Now (Razorpay)\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-        {loadingDeliver && <Loader />}\r\n         {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n-          <div>\r\n+          <div className=\"mt-4\">\r\n+            {loadingDeliver && <Loader />}\r\n             <button\r\n               type=\"button\"\r\n-              className=\"bg-pink-500 text-white w-full py-2\"\r\n+              className=\"bg-green-600 text-white w-full py-2\"\r\n               onClick={deliverHandler}\r\n             >\r\n               Mark As Delivered\r\n             </button>\r\n@@ -164,5 +199,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Order;\n\\ No newline at end of file\n+export default Order;\r\n"
                },
                {
                    "date": 1750657244566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n                           {item.name}\r\n                         </Link>\r\n                       </td>\r\n                       <td className=\"p-2 text-center\">{item.qty}</td>\r\n-                      <td className=\"p-2 text-center\">{item.price}</td>\r\n+                      <td className=\"p-2 text-center\"> {item.price}</td>\r\n                       <td className=\"p-2 text-center\">\r\n                         â‚¹ {(item.qty * item.price).toFixed(2)}\r\n                       </td>\r\n                     </tr>\r\n"
                },
                {
                    "date": 1750657257897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import { useEffect } from \"react\";\r\n+import { Link, useParams } from \"react-router-dom\";\r\n+import { useSelector } from \"react-redux\";\r\n+import { toast } from \"react-toastify\";\r\n+\r\n+import Messsage from \"../../components/Message\";\r\n+import Loader from \"../../components/Loader\";\r\n+\r\n+import {\r\n+  useDeliverOrderMutation,\r\n+  useGetOrderDetailsQuery,\r\n+  usePayOrderMutation,\r\n+} from \"../../redux/api/orderApiSlice\";\r\n+\r\n+const Order = () => {\r\n+  const { id: orderId } = useParams();\r\n+\r\n+  const {\r\n+    data: order,\r\n+    refetch,\r\n+    isLoading,\r\n+    error,\r\n+  } = useGetOrderDetailsQuery(orderId);\r\n+\r\n+  const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\r\n+  const [deliverOrder, { isLoading: loadingDeliver }] =\r\n+    useDeliverOrderMutation();\r\n+  const { userInfo } = useSelector((state) => state.auth);\r\n+\r\n+  const deliverHandler = async () => {\r\n+    await deliverOrder(orderId);\r\n+    refetch();\r\n+  };\r\n+\r\n+  const handleRazorpaySuccess = async (paymentDetails) => {\r\n+    try {\r\n+      await payOrder({ orderId, details: paymentDetails });\r\n+      refetch();\r\n+      toast.success(\"Order paid successfully via Razorpay!\");\r\n+    } catch (err) {\r\n+      toast.error(err?.data?.message || err.message);\r\n+    }\r\n+  };\r\n+\r\n+  const showRazorpay = async () => {\r\n+    const res = await fetch(\"/api/payment/create\", {\r\n+      method: \"POST\",\r\n+      headers: { \"Content-Type\": \"application/json\" },\r\n+      body: JSON.stringify({ amount: order.totalPrice }),\r\n+    });\r\n+\r\n+    const data = await res.json();\r\n+\r\n+    const options = {\r\n+      key: import.meta.env.VITE_RAZORPAY_KEY_ID,\r\n+      amount: data.amount,\r\n+      currency: data.currency,\r\n+      order_id: data.id,\r\n+      handler: function (response) {\r\n+        handleRazorpaySuccess(response);\r\n+      },\r\n+      prefill: {\r\n+        name: userInfo.username,\r\n+        email: userInfo.email,\r\n+      },\r\n+      theme: {\r\n+        color: \"#f472b6\",\r\n+      },\r\n+    };\r\n+\r\n+    const razor = new window.Razorpay(options);\r\n+    razor.open();\r\n+  };\r\n+\r\n+  return isLoading ? (\r\n+    <Loader />\r\n+  ) : error ? (\r\n+    <Messsage variant=\"danger\">{error.data.message}</Messsage>\r\n+  ) : (\r\n+    <div className=\"container flex flex-col ml-[10rem] md:flex-row\">\r\n+      <div className=\"md:w-2/3 pr-4\">\r\n+        <div className=\"border gray-300 mt-5 pb-4 mb-5\">\r\n+          {order.orderItems.length === 0 ? (\r\n+            <Messsage>Order is empty</Messsage>\r\n+          ) : (\r\n+            <div className=\"overflow-x-auto\">\r\n+              <table className=\"w-[80%]\">\r\n+                <thead className=\"border-b-2\">\r\n+                  <tr>\r\n+                    <th className=\"p-2\">Image</th>\r\n+                    <th className=\"p-2\">Product</th>\r\n+                    <th className=\"p-2 text-center\">Quantity</th>\r\n+                    <th className=\"p-2\">Unit Price</th>\r\n+                    <th className=\"p-2\">Total</th>\r\n+                  </tr>\r\n+                </thead>\r\n+                <tbody>\r\n+                  {order.orderItems.map((item, index) => (\r\n+                    <tr key={index}>\r\n+                      <td className=\"p-2\">\r\n+                        <img\r\n+                          src={item.image}\r\n+                          alt={item.name}\r\n+                          className=\"w-16 h-16 object-cover\"\r\n+                        />\r\n+                      </td>\r\n+                      <td className=\"p-2\">\r\n+                        <Link to={`/product/${item.product}`}>\r\n+                          {item.name}\r\n+                        </Link>\r\n+                      </td>\r\n+                      <td className=\"p-2 text-center\">{item.qty}</td>\r\n+                      <td className=\"p-2 text-center\"> â‚¹{item.price}</td>\r\n+                      <td className=\"p-2 text-center\">\r\n+                        â‚¹ {(item.qty * item.price).toFixed(2)}\r\n+                      </td>\r\n+                    </tr>\r\n+                  ))}\r\n+                </tbody>\r\n+              </table>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"md:w-1/3\">\r\n+        <div className=\"mt-5 border-gray-300 pb-4 mb-4\">\r\n+          <h2 className=\"text-xl font-bold mb-2\">Shipping</h2>\r\n+          <p className=\"mb-4 mt-4\">\r\n+            <strong className=\"text-pink-500\">Order:</strong> {order._id}\r\n+          </p>\r\n+          <p className=\"mb-4\">\r\n+            <strong className=\"text-pink-500\">Name:</strong>{\" \"}\r\n+            {order.user.username}\r\n+          </p>\r\n+          <p className=\"mb-4\">\r\n+            <strong className=\"text-pink-500\">Email:</strong> {order.user.email}\r\n+          </p>\r\n+          <p className=\"mb-4\">\r\n+            <strong className=\"text-pink-500\">Address:</strong>{\" \"}\r\n+            {order.shippingAddress.address}, {order.shippingAddress.city},{\" \"}\r\n+            {order.shippingAddress.postalCode}, {order.shippingAddress.country}\r\n+          </p>\r\n+          <p className=\"mb-4\">\r\n+            <strong className=\"text-pink-500\">Method:</strong>{\" \"}\r\n+            {order.paymentMethod}\r\n+          </p>\r\n+\r\n+          {order.isPaid ? (\r\n+            <Messsage variant=\"success\">Paid on {order.paidAt}</Messsage>\r\n+          ) : (\r\n+            <Messsage variant=\"danger\">Not paid</Messsage>\r\n+          )}\r\n+        </div>\r\n+\r\n+        <h2 className=\"text-xl font-bold mb-2 mt-[3rem]\">Order Summary</h2>\r\n+        <div className=\"flex justify-between mb-2\">\r\n+          <span>Items</span>\r\n+          <span>â‚¹ {order.itemsPrice}</span>\r\n+        </div>\r\n+        <div className=\"flex justify-between mb-2\">\r\n+          <span>Shipping</span>\r\n+          <span>â‚¹ {order.shippingPrice}</span>\r\n+        </div>\r\n+        <div className=\"flex justify-between mb-2\">\r\n+          <span>Tax</span>\r\n+          <span>â‚¹ {order.taxPrice}</span>\r\n+        </div>\r\n+        <div className=\"flex justify-between mb-2\">\r\n+          <span>Total</span>\r\n+          <span>â‚¹ {order.totalPrice}</span>\r\n+        </div>\r\n+\r\n+        {!order.isPaid && (\r\n+          <div className=\"mt-4\">\r\n+            {loadingPay && <Loader />}\r\n+            <button\r\n+              onClick={showRazorpay}\r\n+              className=\"bg-pink-500 text-white w-full py-2\"\r\n+            >\r\n+              Pay Now (Razorpay)\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n+          <div className=\"mt-4\">\r\n+            {loadingDeliver && <Loader />}\r\n+            <button\r\n+              type=\"button\"\r\n+              className=\"bg-green-600 text-white w-full py-2\"\r\n+              onClick={deliverHandler}\r\n+            >\r\n+              Mark As Delivered\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Order;\r\n"
                }
            ],
            "date": 1750346707475,
            "name": "Commit-0",
            "content": "import { useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport Messsage from \"../../components/Message\";\r\nimport Loader from \"../../components/Loader\";\r\nimport {\r\n  useDeliverOrderMutation,\r\n  useGetOrderDetailsQuery,\r\n  useGetPaypalClientIdQuery,\r\n  usePayOrderMutation,\r\n} from \"../../redux/api/orderApiSlice\";\r\n\r\nconst Order = () => {\r\n  const { id: orderId } = useParams();\r\n\r\n  const {\r\n    data: order,\r\n    refetch,\r\n    isLoading,\r\n    error,\r\n  } = useGetOrderDetailsQuery(orderId);\r\n\r\n  const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\r\n  const [deliverOrder, { isLoading: loadingDeliver }] =\r\n    useDeliverOrderMutation();\r\n  const { userInfo } = useSelector((state) => state.auth);\r\n\r\n  const [{ isPending }, paypalDispatch] = usePayPalScriptReducer();\r\n\r\n  const {\r\n    data: paypal,\r\n    isLoading: loadingPaPal,\r\n    error: errorPayPal,\r\n  } = useGetPaypalClientIdQuery();\r\n\r\n  useEffect(() => {\r\n    if (!errorPayPal && !loadingPaPal && paypal.clientId) {\r\n      const loadingPaPalScript = async () => {\r\n        paypalDispatch({\r\n          type: \"resetOptions\",\r\n          value: {\r\n            \"client-id\": paypal.clientId,\r\n            currency: \"USD\",\r\n          },\r\n        });\r\n        paypalDispatch({ type: \"setLoadingStatus\", value: \"pending\" });\r\n      };\r\n\r\n      if (order && !order.isPaid) {\r\n        if (!window.paypal) {\r\n          loadingPaPalScript();\r\n        }\r\n      }\r\n    }\r\n  }, [errorPayPal, loadingPaPal, order, paypal, paypalDispatch]);\r\n\r\n  function onApprove(data, actions) {\r\n    return actions.order.capture().then(async function (details) {\r\n      try {\r\n        await payOrder({ orderId, details });\r\n        refetch();\r\n        toast.success(\"Order is paid\");\r\n      } catch (error) {\r\n        toast.error(error?.data?.message || error.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function createOrder(data, actions) {\r\n    return actions.order\r\n      .create({\r\n        purchase_units: [{ amount: { value: order.totalPrice } }],\r\n      })\r\n      .then((orderID) => {\r\n        return orderID;\r\n      });\r\n  }\r\n\r\n  function onError(err) {\r\n    toast.error(err.message);\r\n  }\r\n\r\n  const deliverHandler = async () => {\r\n    await deliverOrder(orderId);\r\n    refetch();\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Messsage variant=\"danger\">{error.data.message}</Messsage>\r\n  ) : (\r\n    <div className=\"container flex flex-col ml-[10rem] md:flex-row\">\r\n      <div className=\"md:w-2/3 pr-4\">\r\n        <div className=\"border gray-300 mt-5 pb-4 mb-5\">\r\n          {order.orderItems.length === 0 ? (\r\n            <Messsage>Order is empty</Messsage>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-[80%]\">\r\n                <thead className=\"border-b-2\">\r\n                  <tr>\r\n                    <th className=\"p-2\">Image</th>\r\n                    <th className=\"p-2\">Product</th>\r\n                    <th className=\"p-2 text-center\">Quantity</th>\r\n                    <th className=\"p-2\">Unit Price</th>\r\n                    <th className=\"p-2\">Total</th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <tr key={index}>\r\n                      <td className=\"p-2\">\r\n                        <img\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          className=\"w-16 h-16 object-cover\"\r\n                        />\r\n                      </td>\r\n\r\n                      <td className=\"p-2\">\r\n                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                      </td>\r\n\r\n                      <td className=\"p-2 text-center\">{item.qty}</td>\r\n                      <td className=\"p-2 text-center\">{item.price}</td>\r\n                      <td className=\"p-2 text-center\">\r\n                        $ {(item.qty * item.price).toFixed(2)}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"md:w-1/3\">\r\n        <div className=\"mt-5 border-gray-300 pb-4 mb-4\">\r\n          <h2 className=\"text-xl font-bold mb-2\">Shipping</h2>\r\n          <p className=\"mb-4 mt-4\">\r\n            <strong className=\"text-pink-500\">Order:</strong> {order._id}\r\n          </p>\r\n\r\n          <p className=\"mb-4\">\r\n            <strong className=\"text-pink-500\">Name:</strong>{\" \"}\r\n            {order.user.username}\r\n          </p>\r\n\r\n          <p className=\"mb-4\">\r\n            <strong className=\"text-pink-500\">Email:</strong> {order.user.email}\r\n          </p>\r\n\r\n          <p className=\"mb-4\">\r\n            <strong className=\"text-pink-500\">Address:</strong>{\" \"}\r\n            {order.shippingAddress.address}, {order.shippingAddress.city}{\" \"}\r\n            {order.shippingAddress.postalCode}, {order.shippingAddress.country}\r\n          </p>\r\n\r\n          <p className=\"mb-4\">\r\n            <strong className=\"text-pink-500\">Method:</strong>{\" \"}\r\n            {order.paymentMethod}\r\n          </p>\r\n\r\n          {order.isPaid ? (\r\n            <Messsage variant=\"success\">Paid on {order.paidAt}</Messsage>\r\n          ) : (\r\n            <Messsage variant=\"danger\">Not paid</Messsage>\r\n          )}\r\n        </div>\r\n\r\n        <h2 className=\"text-xl font-bold mb-2 mt-[3rem]\">Order Summary</h2>\r\n        <div className=\"flex justify-between mb-2\">\r\n          <span>Items</span>\r\n          <span>$ {order.itemsPrice}</span>\r\n        </div>\r\n        <div className=\"flex justify-between mb-2\">\r\n          <span>Shipping</span>\r\n          <span>$ {order.shippingPrice}</span>\r\n        </div>\r\n        <div className=\"flex justify-between mb-2\">\r\n          <span>Tax</span>\r\n          <span>$ {order.taxPrice}</span>\r\n        </div>\r\n        <div className=\"flex justify-between mb-2\">\r\n          <span>Total</span>\r\n          <span>$ {order.totalPrice}</span>\r\n        </div>\r\n\r\n        {!order.isPaid && (\r\n          <div>\r\n            {loadingPay && <Loader />}{\" \"}\r\n            {isPending ? (\r\n              <Loader />\r\n            ) : (\r\n              <div>\r\n                <div>\r\n                  <PayPalButtons\r\n                    createOrder={createOrder}\r\n                    onApprove={onApprove}\r\n                    onError={onError}\r\n                  ></PayPalButtons>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {loadingDeliver && <Loader />}\r\n        {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n          <div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"bg-pink-500 text-white w-full py-2\"\r\n              onClick={deliverHandler}\r\n            >\r\n              Mark As Delivered\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;"
        }
    ]
}