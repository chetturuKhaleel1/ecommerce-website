{
    "sourceFile": "frontend/src/pages/Orders/PlaceOrder.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1750345071992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750345090226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+\r\n+import { useEffect } from \"react\";\r\n+import { Link, useNavigate } from \"react-router-dom\";\r\n+import { toast } from \"react-toastify\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+import Message from \"../../components/Message\";\r\n+import ProgressSteps from \"../../components/ProgressSteps\";\r\n+import Loader from \"../../components/Loader\";\r\n+import { useCreateOrderMutation } from \"../../redux/api/orderApiSlice\";\r\n+import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n+\r\n+const PlaceOrder = () => {\r\n+  const navigate = useNavigate();\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const cart = useSelector((state) => state.cart);\r\n+\r\n+  const [createOrder, { isLoading, error }] = useCreateOrderMutation();\r\n+\r\n+  useEffect(() => {\r\n+    if (!cart.shippingAddress.address) {\r\n+      navigate(\"/shipping\");\r\n+    }\r\n+  }, [cart.paymentMethod, cart.shippingAddress.address, navigate]);\r\n+\r\n+  const placeOrderHandler = async () => {\r\n+    try {\r\n+      const res = await createOrder({\r\n+        orderItems: cart.cartItems.map((item) => ({\r\n+          name: item.name,\r\n+          qty: item.qty,\r\n+          image: item.image,\r\n+          price: item.price,\r\n+          product: item._id || item.product, // ✅ Ensure product ID is sent\r\n+        })),\r\n+        shippingAddress: cart.shippingAddress,\r\n+        paymentMethod: cart.paymentMethod,\r\n+        itemsPrice: cart.itemsPrice,\r\n+        shippingPrice: cart.shippingPrice,\r\n+        taxPrice: cart.taxPrice,\r\n+        totalPrice: cart.totalPrice,\r\n+      }).unwrap();\r\n+\r\n+      dispatch(clearCartItems());\r\n+      navigate(`/order/${res._id}`);\r\n+    } catch (error) {\r\n+      toast.error(error?.data?.error || \"Failed to place order\");\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <ProgressSteps step1 step2 step3 />\r\n+\r\n+      <div className=\"container mx-auto mt-8\">\r\n+        {cart.cartItems.length === 0 ? (\r\n+          <Message>Your cart is empty</Message>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"w-full border-collapse\">\r\n+              <thead>\r\n+                <tr>\r\n+                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {cart.cartItems.map((item, index) => (\r\n+                  <tr key={index}>\r\n+                    <td className=\"p-2\">\r\n+                      <img\r\n+                        src={item.image}\r\n+                        alt={item.name}\r\n+                        className=\"w-16 h-16 object-cover\"\r\n+                      />\r\n+                    </td>\r\n+                    <td className=\"p-2\">\r\n+                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n+                    </td>\r\n+                    <td className=\"p-2\">{item.qty}</td>\r\n+                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n+                    <td className=\"p-2\">\r\n+                      $ {(item.qty * item.price).toFixed(2)}\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-8\">\r\n+          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n+          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n+            <ul className=\"text-lg\">\r\n+              <li>\r\n+                <span className=\"font-semibold mb-4\">Items:</span> ${cart.itemsPrice}\r\n+              </li>\r\n+              <li>\r\n+                <span className=\"font-semibold mb-4\">Shipping:</span> ${cart.shippingPrice}\r\n+              </li>\r\n+              <li>\r\n+                <span className=\"font-semibold mb-4\">Tax:</span> ${cart.taxPrice}\r\n+              </li>\r\n+              <li>\r\n+                <span className=\"font-semibold mb-4\">Total:</span> ${cart.totalPrice}\r\n+              </li>\r\n+            </ul>\r\n+\r\n+            {error && <Message variant=\"danger\">{error.data.message}</Message>}\r\n+\r\n+            <div>\r\n+              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n+              <p>\r\n+                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n+                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n+                {cart.shippingAddress.country}\r\n+              </p>\r\n+            </div>\r\n+\r\n+            <div>\r\n+              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n+              <strong>Method:</strong> {cart.paymentMethod}\r\n+            </div>\r\n+          </div>\r\n+\r\n+          <button\r\n+            type=\"button\"\r\n+            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n+            disabled={cart.cartItems.length === 0}\r\n+            onClick={placeOrderHandler}\r\n+          >\r\n+            Place Order\r\n+          </button>\r\n+\r\n+          {isLoading && <Loader />}\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default PlaceOrder;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750347438005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n import { useEffect } from \"react\";\r\n import { Link, useNavigate } from \"react-router-dom\";\r\n import { toast } from \"react-toastify\";\r\n import { useDispatch, useSelector } from \"react-redux\";\r\n@@ -7,192 +6,90 @@\n import ProgressSteps from \"../../components/ProgressSteps\";\r\n import Loader from \"../../components/Loader\";\r\n import { useCreateOrderMutation } from \"../../redux/api/orderApiSlice\";\r\n import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n+import axios from \"axios\";\r\n \r\n const PlaceOrder = () => {\r\n   const navigate = useNavigate();\r\n   const dispatch = useDispatch();\r\n \r\n   const cart = useSelector((state) => state.cart);\r\n-\r\n   const [createOrder, { isLoading, error }] = useCreateOrderMutation();\r\n \r\n   useEffect(() => {\r\n     if (!cart.shippingAddress.address) {\r\n       navigate(\"/shipping\");\r\n     }\r\n-  }, [cart.paymentMethod, cart.shippingAddress.address, navigate]);\r\n+  }, [cart.shippingAddress.address, navigate]);\r\n \r\n   const placeOrderHandler = async () => {\r\n     try {\r\n-      const res = await createOrder({\r\n-        orderItems: cart.cartItems.map((item) => ({\r\n-          name: item.name,\r\n-          qty: item.qty,\r\n-          image: item.image,\r\n-          price: item.price,\r\n-          product: item._id || item.product, // ✅ Ensure product ID is sent\r\n-        })),\r\n-        shippingAddress: cart.shippingAddress,\r\n-        paymentMethod: cart.paymentMethod,\r\n-        itemsPrice: cart.itemsPrice,\r\n-        shippingPrice: cart.shippingPrice,\r\n-        taxPrice: cart.taxPrice,\r\n-        totalPrice: cart.totalPrice,\r\n-      }).unwrap();\r\n+      // STEP 1️⃣: Create Razorpay Order\r\n+      const { data: razorpayOrder } = await axios.post(\"/api/payment/create\", {\r\n+        amount: cart.totalPrice * 100, // amount in paise\r\n+        currency: \"INR\",\r\n+      });\r\n \r\n-      dispatch(clearCartItems());\r\n-      navigate(`/order/${res._id}`);\r\n-    } catch (error) {\r\n-      toast.error(error?.data?.error || \"Failed to place order\");\r\n-    }\r\n-  };\r\n+      const options = {\r\n+        key: \"YOUR_RAZORPAY_KEY_ID\", // Replace with your Razorpay Key ID\r\n+        amount: razorpayOrder.amount,\r\n+        currency: razorpayOrder.currency,\r\n+        order_id: razorpayOrder.id,\r\n+        name: \"Your Store Name\",\r\n+        description: \"Purchase\",\r\n+        handler: async function (response) {\r\n+          try {\r\n+            // STEP 2️⃣: Verify Payment\r\n+            const verifyRes = await axios.post(\"/api/payment/verify\", {\r\n+              razorpay_order_id: response.razorpay_order_id,\r\n+              razorpay_payment_id: response.razorpay_payment_id,\r\n+              razorpay_signature: response.razorpay_signature,\r\n+            });\r\n \r\n-  return (\r\n-    <>\r\n-      <ProgressSteps step1 step2 step3 />\r\n+            if (verifyRes.data.success) {\r\n+              // STEP 3️⃣: Create Order in DB\r\n+              const newOrder = await createOrder({\r\n+                orderItems: cart.cartItems.map((item) => ({\r\n+                  name: item.name,\r\n+                  qty: item.qty,\r\n+                  image: item.image,\r\n+                  price: item.price,\r\n+                  product: item._id || item.product,\r\n+                })),\r\n+                shippingAddress: cart.shippingAddress,\r\n+                paymentMethod: cart.paymentMethod,\r\n+                itemsPrice: cart.itemsPrice,\r\n+                shippingPrice: cart.shippingPrice,\r\n+                taxPrice: cart.taxPrice,\r\n+                totalPrice: cart.totalPrice,\r\n+                isPaid: true,\r\n+                paidAt: new Date().toISOString(),\r\n+              }).unwrap();\r\n \r\n-      <div className=\"container mx-auto mt-8\">\r\n-        {cart.cartItems.length === 0 ? (\r\n-          <Message>Your cart is empty</Message>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"w-full border-collapse\">\r\n-              <thead>\r\n-                <tr>\r\n-                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {cart.cartItems.map((item, index) => (\r\n-                  <tr key={index}>\r\n-                    <td className=\"p-2\">\r\n-                      <img\r\n-                        src={item.image}\r\n-                        alt={item.name}\r\n-                        className=\"w-16 h-16 object-cover\"\r\n-                      />\r\n-                    </td>\r\n-                    <td className=\"p-2\">\r\n-                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n-                    </td>\r\n-                    <td className=\"p-2\">{item.qty}</td>\r\n-                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n-                    <td className=\"p-2\">\r\n-                      $ {(item.qty * item.price).toFixed(2)}\r\n-                    </td>\r\n-                  </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n-        )}\r\n+              dispatch(clearCartItems());\r\n+              navigate(`/order/${newOrder._id}`);\r\n+            }\r\n+          } catch (error) {\r\n+            toast.error(\"Payment verification failed\");\r\n+          }\r\n+        },\r\n+        prefill: {\r\n+          name: \"Customer Name\",\r\n+          email: \"customer@example.com\",\r\n+          contact: \"9999999999\",\r\n+        },\r\n+        theme: {\r\n+          color: \"#F472B6\",\r\n+        },\r\n+      };\r\n \r\n-        <div className=\"mt-8\">\r\n-          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n-          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n-            <ul className=\"text-lg\">\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Items:</span> ${cart.itemsPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Shipping:</span> ${cart.shippingPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Tax:</span> ${cart.taxPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Total:</span> ${cart.totalPrice}\r\n-              </li>\r\n-            </ul>\r\n-\r\n-            {error && <Message variant=\"danger\">{error.data.message}</Message>}\r\n-\r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n-              <p>\r\n-                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n-                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n-                {cart.shippingAddress.country}\r\n-              </p>\r\n-            </div>\r\n-\r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n-              <strong>Method:</strong> {cart.paymentMethod}\r\n-            </div>\r\n-          </div>\r\n-\r\n-          <button\r\n-            type=\"button\"\r\n-            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n-            disabled={cart.cartItems.length === 0}\r\n-            onClick={placeOrderHandler}\r\n-          >\r\n-            Place Order\r\n-          </button>\r\n-\r\n-          {isLoading && <Loader />}\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default PlaceOrder;\n-\r\n-import { useEffect } from \"react\";\r\n-import { Link, useNavigate } from \"react-router-dom\";\r\n-import { toast } from \"react-toastify\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import Message from \"../../components/Message\";\r\n-import ProgressSteps from \"../../components/ProgressSteps\";\r\n-import Loader from \"../../components/Loader\";\r\n-import { useCreateOrderMutation } from \"../../redux/api/orderApiSlice\";\r\n-import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n-\r\n-const PlaceOrder = () => {\r\n-  const navigate = useNavigate();\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const cart = useSelector((state) => state.cart);\r\n-\r\n-  const [createOrder, { isLoading, error }] = useCreateOrderMutation();\r\n-\r\n-  useEffect(() => {\r\n-    if (!cart.shippingAddress.address) {\r\n-      navigate(\"/shipping\");\r\n+      const razorpay = new window.Razorpay(options);\r\n+      razorpay.open();\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Payment initiation failed\");\r\n     }\r\n-  }, [cart.paymentMethod, cart.shippingAddress.address, navigate]);\r\n-\r\n-  const placeOrderHandler = async () => {\r\n-    try {\r\n-      const res = await createOrder({\r\n-        orderItems: cart.cartItems.map((item) => ({\r\n-          name: item.name,\r\n-          qty: item.qty,\r\n-          image: item.image,\r\n-          price: item.price,\r\n-          product: item._id || item.product, // ✅ Ensure product ID is sent\r\n-        })),\r\n-        shippingAddress: cart.shippingAddress,\r\n-        paymentMethod: cart.paymentMethod,\r\n-        itemsPrice: cart.itemsPrice,\r\n-        shippingPrice: cart.shippingPrice,\r\n-        taxPrice: cart.taxPrice,\r\n-        totalPrice: cart.totalPrice,\r\n-      }).unwrap();\r\n-\r\n-      dispatch(clearCartItems());\r\n-      navigate(`/order/${res._id}`);\r\n-    } catch (error) {\r\n-      toast.error(error?.data?.error || \"Failed to place order\");\r\n-    }\r\n   };\r\n \r\n   return (\r\n     <>\r\n@@ -228,9 +125,9 @@\n                     </td>\r\n                     <td className=\"p-2\">{item.qty}</td>\r\n                     <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n                     <td className=\"p-2\">\r\n-                      $ {(item.qty * item.price).toFixed(2)}\r\n+                      ₹ {(item.qty * item.price).toFixed(2)}\r\n                     </td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n@@ -241,24 +138,14 @@\n         <div className=\"mt-8\">\r\n           <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n           <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n             <ul className=\"text-lg\">\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Items:</span> ${cart.itemsPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Shipping:</span> ${cart.shippingPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Tax:</span> ${cart.taxPrice}\r\n-              </li>\r\n-              <li>\r\n-                <span className=\"font-semibold mb-4\">Total:</span> ${cart.totalPrice}\r\n-              </li>\r\n+              <li><strong>Items:</strong> ₹{cart.itemsPrice}</li>\r\n+              <li><strong>Shipping:</strong> ₹{cart.shippingPrice}</li>\r\n+              <li><strong>Tax:</strong> ₹{cart.taxPrice}</li>\r\n+              <li><strong>Total:</strong> ₹{cart.totalPrice}</li>\r\n             </ul>\r\n \r\n-            {error && <Message variant=\"danger\">{error.data.message}</Message>}\r\n-\r\n             <div>\r\n               <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n               <p>\r\n                 <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n@@ -278,9 +165,9 @@\n             className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n             disabled={cart.cartItems.length === 0}\r\n             onClick={placeOrderHandler}\r\n           >\r\n-            Place Order\r\n+            Pay Now with Razorpay\r\n           </button>\r\n \r\n           {isLoading && <Loader />}\r\n         </div>\r\n@@ -288,5 +175,5 @@\n     </>\r\n   );\r\n };\r\n \r\n-export default PlaceOrder;\n\\ No newline at end of file\n+export default PlaceOrder;\r\n"
                },
                {
                    "date": 1750348441058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,52 +4,58 @@\n import { useDispatch, useSelector } from \"react-redux\";\r\n import Message from \"../../components/Message\";\r\n import ProgressSteps from \"../../components/ProgressSteps\";\r\n import Loader from \"../../components/Loader\";\r\n-import { useCreateOrderMutation } from \"../../redux/api/orderApiSlice\";\r\n import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n-import axios from \"axios\";\r\n+import {\r\n+  useCreateOrderMutation,\r\n+  useCreateRazorpayOrderMutation,\r\n+  useVerifyRazorpayPaymentMutation,\r\n+} from \"../../redux/api/orderApiSlice\";\r\n \r\n const PlaceOrder = () => {\r\n   const navigate = useNavigate();\r\n   const dispatch = useDispatch();\r\n \r\n   const cart = useSelector((state) => state.cart);\r\n-  const [createOrder, { isLoading, error }] = useCreateOrderMutation();\r\n \r\n+  const [createOrder, { isLoading }] = useCreateOrderMutation();\r\n+  const [createRazorpayOrder] = useCreateRazorpayOrderMutation();\r\n+  const [verifyRazorpayPayment] = useVerifyRazorpayPaymentMutation();\r\n+\r\n   useEffect(() => {\r\n     if (!cart.shippingAddress.address) {\r\n       navigate(\"/shipping\");\r\n     }\r\n   }, [cart.shippingAddress.address, navigate]);\r\n \r\n   const placeOrderHandler = async () => {\r\n     try {\r\n-      // STEP 1️⃣: Create Razorpay Order\r\n-      const { data: razorpayOrder } = await axios.post(\"/api/payment/create\", {\r\n-        amount: cart.totalPrice * 100, // amount in paise\r\n+      // STEP 1️⃣: Create Razorpay order from backend\r\n+      const razorpayOrder = await createRazorpayOrder({\r\n+        amount: cart.totalPrice * 100,\r\n         currency: \"INR\",\r\n-      });\r\n+      }).unwrap();\r\n \r\n       const options = {\r\n-        key: \"YOUR_RAZORPAY_KEY_ID\", // Replace with your Razorpay Key ID\r\n+        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n         amount: razorpayOrder.amount,\r\n         currency: razorpayOrder.currency,\r\n         order_id: razorpayOrder.id,\r\n         name: \"Your Store Name\",\r\n-        description: \"Purchase\",\r\n-        handler: async function (response) {\r\n+        description: \"Order Payment\",\r\n+        handler: async (response) => {\r\n           try {\r\n-            // STEP 2️⃣: Verify Payment\r\n-            const verifyRes = await axios.post(\"/api/payment/verify\", {\r\n+            // STEP 2️⃣: Verify payment\r\n+            const verifyRes = await verifyRazorpayPayment({\r\n               razorpay_order_id: response.razorpay_order_id,\r\n               razorpay_payment_id: response.razorpay_payment_id,\r\n               razorpay_signature: response.razorpay_signature,\r\n-            });\r\n+            }).unwrap();\r\n \r\n-            if (verifyRes.data.success) {\r\n-              // STEP 3️⃣: Create Order in DB\r\n-              const newOrder = await createOrder({\r\n+            if (verifyRes.success) {\r\n+              // STEP 3️⃣: Create order in DB\r\n+              const order = await createOrder({\r\n                 orderItems: cart.cartItems.map((item) => ({\r\n                   name: item.name,\r\n                   qty: item.qty,\r\n                   image: item.image,\r\n@@ -66,36 +72,32 @@\n                 paidAt: new Date().toISOString(),\r\n               }).unwrap();\r\n \r\n               dispatch(clearCartItems());\r\n-              navigate(`/order/${newOrder._id}`);\r\n+              navigate(`/order/${order._id}`);\r\n             }\r\n-          } catch (error) {\r\n+          } catch (err) {\r\n             toast.error(\"Payment verification failed\");\r\n           }\r\n         },\r\n         prefill: {\r\n           name: \"Customer Name\",\r\n           email: \"customer@example.com\",\r\n           contact: \"9999999999\",\r\n         },\r\n-        theme: {\r\n-          color: \"#F472B6\",\r\n-        },\r\n+        theme: { color: \"#F472B6\" },\r\n       };\r\n \r\n       const razorpay = new window.Razorpay(options);\r\n       razorpay.open();\r\n     } catch (err) {\r\n-      console.error(err);\r\n       toast.error(\"Payment initiation failed\");\r\n     }\r\n   };\r\n \r\n   return (\r\n     <>\r\n       <ProgressSteps step1 step2 step3 />\r\n-\r\n       <div className=\"container mx-auto mt-8\">\r\n         {cart.cartItems.length === 0 ? (\r\n           <Message>Your cart is empty</Message>\r\n         ) : (\r\n@@ -124,11 +126,9 @@\n                       <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n                     </td>\r\n                     <td className=\"p-2\">{item.qty}</td>\r\n                     <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n-                    <td className=\"p-2\">\r\n-                      ₹ {(item.qty * item.price).toFixed(2)}\r\n-                    </td>\r\n+                    <td className=\"p-2\">₹ {(item.qty * item.price).toFixed(2)}</td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n             </table>\r\n"
                },
                {
                    "date": 1750348525880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         currency: \"INR\",\r\n       }).unwrap();\r\n \r\n       const options = {\r\n-        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n+        key: import.meta.env.RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n         amount: razorpayOrder.amount,\r\n         currency: razorpayOrder.currency,\r\n         order_id: razorpayOrder.id,\r\n         name: \"Your Store Name\",\r\n"
                },
                {
                    "date": 1750351353614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import { useEffect } from \"react\";\r\n+import { Link, useNavigate } from \"react-router-dom\";\r\n+import { toast } from \"react-toastify\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+import Message from \"../../components/Message\";\r\n+import ProgressSteps from \"../../components/ProgressSteps\";\r\n+import Loader from \"../../components/Loader\";\r\n+import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n+import {\r\n+  useCreateOrderMutation,\r\n+  useCreateRazorpayOrderMutation,\r\n+  useVerifyRazorpayPaymentMutation,\r\n+} from \"../../redux/api/orderApiSlice\";\r\n+\r\n+const PlaceOrder = () => {\r\n+  const navigate = useNavigate();\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const cart = useSelector((state) => state.cart);\r\n+\r\n+  const [createOrder, { isLoading }] = useCreateOrderMutation();\r\n+  const [createRazorpayOrder] = useCreateRazorpayOrderMutation();\r\n+  const [verifyRazorpayPayment] = useVerifyRazorpayPaymentMutation();\r\n+\r\n+  useEffect(() => {\r\n+    if (!cart.shippingAddress.address) {\r\n+      navigate(\"/shipping\");\r\n+    }\r\n+  }, [cart.shippingAddress.address, navigate]);\r\n+\r\n+  const placeOrderHandler = async () => {\r\n+    try {\r\n+      // STEP 1️⃣: Create Razorpay order from backend\r\n+      const razorpayOrder = await createRazorpayOrder({\r\n+        amount: cart.totalPrice * 100,\r\n+        currency: \"INR\",\r\n+      }).unwrap();\r\n+\r\n+      const options = {\r\n+        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n+        amount: razorpayOrder.amount,\r\n+        currency: razorpayOrder.currency,\r\n+        order_id: razorpayOrder.id,\r\n+        name: \"Your Store Name\",\r\n+        description: \"Order Payment\",\r\n+        handler: async (response) => {\r\n+          try {\r\n+            // STEP 2️⃣: Verify payment\r\n+            const verifyRes = await verifyRazorpayPayment({\r\n+              razorpay_order_id: response.razorpay_order_id,\r\n+              razorpay_payment_id: response.razorpay_payment_id,\r\n+              razorpay_signature: response.razorpay_signature,\r\n+            }).unwrap();\r\n+\r\n+            if (verifyRes.success) {\r\n+              // STEP 3️⃣: Create order in DB\r\n+              const order = await createOrder({\r\n+                orderItems: cart.cartItems.map((item) => ({\r\n+                  name: item.name,\r\n+                  qty: item.qty,\r\n+                  image: item.image,\r\n+                  price: item.price,\r\n+                  product: item._id || item.product,\r\n+                })),\r\n+                shippingAddress: cart.shippingAddress,\r\n+                paymentMethod: cart.paymentMethod,\r\n+                itemsPrice: cart.itemsPrice,\r\n+                shippingPrice: cart.shippingPrice,\r\n+                taxPrice: cart.taxPrice,\r\n+                totalPrice: cart.totalPrice,\r\n+                isPaid: true,\r\n+                paidAt: new Date().toISOString(),\r\n+              }).unwrap();\r\n+\r\n+              dispatch(clearCartItems());\r\n+              navigate(`/order/${order._id}`);\r\n+            }\r\n+          } catch (err) {\r\n+            toast.error(\"Payment verification failed\");\r\n+          }\r\n+        },\r\n+        prefill: {\r\n+          name: \"Customer Name\",\r\n+          email: \"customer@example.com\",\r\n+          contact: \"9999999999\",\r\n+        },\r\n+        theme: { color: \"#F472B6\" },\r\n+      };\r\n+\r\n+      const razorpay = new window.Razorpay(options);\r\n+      razorpay.open();\r\n+    } catch (err) {\r\n+      toast.error(\"Payment initiation failed\");\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <ProgressSteps step1 step2 step3 />\r\n+      <div className=\"container mx-auto mt-8\">\r\n+        {cart.cartItems.length === 0 ? (\r\n+          <Message>Your cart is empty</Message>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"w-full border-collapse\">\r\n+              <thead>\r\n+                <tr>\r\n+                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {cart.cartItems.map((item, index) => (\r\n+                  <tr key={index}>\r\n+                    <td className=\"p-2\">\r\n+                      <img\r\n+                        src={item.image}\r\n+                        alt={item.name}\r\n+                        className=\"w-16 h-16 object-cover\"\r\n+                      />\r\n+                    </td>\r\n+                    <td className=\"p-2\">\r\n+                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n+                    </td>\r\n+                    <td className=\"p-2\">{item.qty}</td>\r\n+                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n+                    <td className=\"p-2\">₹ {(item.qty * item.price).toFixed(2)}</td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-8\">\r\n+          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n+          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n+            <ul className=\"text-lg\">\r\n+              <li><strong>Items:</strong> ₹{cart.itemsPrice}</li>\r\n+              <li><strong>Shipping:</strong> ₹{cart.shippingPrice}</li>\r\n+              <li><strong>Tax:</strong> ₹{cart.taxPrice}</li>\r\n+              <li><strong>Total:</strong> ₹{cart.totalPrice}</li>\r\n+            </ul>\r\n+\r\n+            <div>\r\n+              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n+              <p>\r\n+                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n+                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n+                {cart.shippingAddress.country}\r\n+              </p>\r\n+            </div>\r\n+\r\n+            <div>\r\n+              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n+              <strong>Method:</strong> {cart.paymentMethod}\r\n+            </div>\r\n+          </div>\r\n+\r\n+          <button\r\n+            type=\"button\"\r\n+            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n+            disabled={cart.cartItems.length === 0}\r\n+            onClick={placeOrderHandler}\r\n+          >\r\n+            Pay Now with Razorpay\r\n+          </button>\r\n+\r\n+          {isLoading && <Loader />}\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default PlaceOrder;\r\n"
                },
                {
                    "date": 1750499089135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,191 +1,14 @@\n import { useEffect } from \"react\";\r\n import { Link, useNavigate } from \"react-router-dom\";\r\n import { toast } from \"react-toastify\";\r\n import { useDispatch, useSelector } from \"react-redux\";\r\n+\r\n import Message from \"../../components/Message\";\r\n import ProgressSteps from \"../../components/ProgressSteps\";\r\n import Loader from \"../../components/Loader\";\r\n import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n-import {\r\n-  useCreateOrderMutation,\r\n-  useCreateRazorpayOrderMutation,\r\n-  useVerifyRazorpayPaymentMutation,\r\n-} from \"../../redux/api/orderApiSlice\";\r\n \r\n-const PlaceOrder = () => {\r\n-  const navigate = useNavigate();\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const cart = useSelector((state) => state.cart);\r\n-\r\n-  const [createOrder, { isLoading }] = useCreateOrderMutation();\r\n-  const [createRazorpayOrder] = useCreateRazorpayOrderMutation();\r\n-  const [verifyRazorpayPayment] = useVerifyRazorpayPaymentMutation();\r\n-\r\n-  useEffect(() => {\r\n-    if (!cart.shippingAddress.address) {\r\n-      navigate(\"/shipping\");\r\n-    }\r\n-  }, [cart.shippingAddress.address, navigate]);\r\n-\r\n-  const placeOrderHandler = async () => {\r\n-    try {\r\n-      // STEP 1️⃣: Create Razorpay order from backend\r\n-      const razorpayOrder = await createRazorpayOrder({\r\n-        amount: cart.totalPrice * 100,\r\n-        currency: \"INR\",\r\n-      }).unwrap();\r\n-\r\n-      const options = {\r\n-        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n-        amount: razorpayOrder.amount,\r\n-        currency: razorpayOrder.currency,\r\n-        order_id: razorpayOrder.id,\r\n-        name: \"Your Store Name\",\r\n-        description: \"Order Payment\",\r\n-        handler: async (response) => {\r\n-          try {\r\n-            // STEP 2️⃣: Verify payment\r\n-            const verifyRes = await verifyRazorpayPayment({\r\n-              razorpay_order_id: response.razorpay_order_id,\r\n-              razorpay_payment_id: response.razorpay_payment_id,\r\n-              razorpay_signature: response.razorpay_signature,\r\n-            }).unwrap();\r\n-\r\n-            if (verifyRes.success) {\r\n-              // STEP 3️⃣: Create order in DB\r\n-              const order = await createOrder({\r\n-                orderItems: cart.cartItems.map((item) => ({\r\n-                  name: item.name,\r\n-                  qty: item.qty,\r\n-                  image: item.image,\r\n-                  price: item.price,\r\n-                  product: item._id || item.product,\r\n-                })),\r\n-                shippingAddress: cart.shippingAddress,\r\n-                paymentMethod: cart.paymentMethod,\r\n-                itemsPrice: cart.itemsPrice,\r\n-                shippingPrice: cart.shippingPrice,\r\n-                taxPrice: cart.taxPrice,\r\n-                totalPrice: cart.totalPrice,\r\n-                isPaid: true,\r\n-                paidAt: new Date().toISOString(),\r\n-              }).unwrap();\r\n-\r\n-              dispatch(clearCartItems());\r\n-              navigate(`/order/${order._id}`);\r\n-            }\r\n-          } catch (err) {\r\n-            toast.error(\"Payment verification failed\");\r\n-          }\r\n-        },\r\n-        prefill: {\r\n-          name: \"Customer Name\",\r\n-          email: \"customer@example.com\",\r\n-          contact: \"9999999999\",\r\n-        },\r\n-        theme: { color: \"#F472B6\" },\r\n-      };\r\n-\r\n-      const razorpay = new window.Razorpay(options);\r\n-      razorpay.open();\r\n-    } catch (err) {\r\n-      toast.error(\"Payment initiation failed\");\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <ProgressSteps step1 step2 step3 />\r\n-      <div className=\"container mx-auto mt-8\">\r\n-        {cart.cartItems.length === 0 ? (\r\n-          <Message>Your cart is empty</Message>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"w-full border-collapse\">\r\n-              <thead>\r\n-                <tr>\r\n-                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n-                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {cart.cartItems.map((item, index) => (\r\n-                  <tr key={index}>\r\n-                    <td className=\"p-2\">\r\n-                      <img\r\n-                        src={item.image}\r\n-                        alt={item.name}\r\n-                        className=\"w-16 h-16 object-cover\"\r\n-                      />\r\n-                    </td>\r\n-                    <td className=\"p-2\">\r\n-                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n-                    </td>\r\n-                    <td className=\"p-2\">{item.qty}</td>\r\n-                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n-                    <td className=\"p-2\">₹ {(item.qty * item.price).toFixed(2)}</td>\r\n-                  </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n-        )}\r\n-\r\n-        <div className=\"mt-8\">\r\n-          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n-          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n-            <ul className=\"text-lg\">\r\n-              <li><strong>Items:</strong> ₹{cart.itemsPrice}</li>\r\n-              <li><strong>Shipping:</strong> ₹{cart.shippingPrice}</li>\r\n-              <li><strong>Tax:</strong> ₹{cart.taxPrice}</li>\r\n-              <li><strong>Total:</strong> ₹{cart.totalPrice}</li>\r\n-            </ul>\r\n-\r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n-              <p>\r\n-                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n-                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n-                {cart.shippingAddress.country}\r\n-              </p>\r\n-            </div>\r\n-\r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n-              <strong>Method:</strong> {cart.paymentMethod}\r\n-            </div>\r\n-          </div>\r\n-\r\n-          <button\r\n-            type=\"button\"\r\n-            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n-            disabled={cart.cartItems.length === 0}\r\n-            onClick={placeOrderHandler}\r\n-          >\r\n-            Pay Now with Razorpay\r\n-          </button>\r\n-\r\n-          {isLoading && <Loader />}\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default PlaceOrder;\r\n-import { useEffect } from \"react\";\r\n-import { Link, useNavigate } from \"react-router-dom\";\r\n-import { toast } from \"react-toastify\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import Message from \"../../components/Message\";\r\n-import ProgressSteps from \"../../components/ProgressSteps\";\r\n-import Loader from \"../../components/Loader\";\r\n-import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n import {\r\n   useCreateOrderMutation,\r\n   useCreateRazorpayOrderMutation,\r\n   useVerifyRazorpayPaymentMutation,\r\n@@ -193,9 +16,8 @@\n \r\n const PlaceOrder = () => {\r\n   const navigate = useNavigate();\r\n   const dispatch = useDispatch();\r\n-\r\n   const cart = useSelector((state) => state.cart);\r\n \r\n   const [createOrder, { isLoading }] = useCreateOrderMutation();\r\n   const [createRazorpayOrder] = useCreateRazorpayOrderMutation();\r\n@@ -208,32 +30,32 @@\n   }, [cart.shippingAddress.address, navigate]);\r\n \r\n   const placeOrderHandler = async () => {\r\n     try {\r\n-      // STEP 1️⃣: Create Razorpay order from backend\r\n+      // 1️⃣ Create Razorpay order\r\n       const razorpayOrder = await createRazorpayOrder({\r\n         amount: cart.totalPrice * 100,\r\n         currency: \"INR\",\r\n       }).unwrap();\r\n \r\n       const options = {\r\n-        key: import.meta.env.RAZORPAY_KEY_ID, // 👈 Make sure this is set in .env\r\n+        key: import.meta.env.VITE_RAZORPAY_KEY_ID,\r\n         amount: razorpayOrder.amount,\r\n         currency: razorpayOrder.currency,\r\n         order_id: razorpayOrder.id,\r\n-        name: \"Your Store Name\",\r\n+        name: \"Khaleel Store\",\r\n         description: \"Order Payment\",\r\n         handler: async (response) => {\r\n           try {\r\n-            // STEP 2️⃣: Verify payment\r\n+            // 2️⃣ Verify Razorpay Signature\r\n             const verifyRes = await verifyRazorpayPayment({\r\n               razorpay_order_id: response.razorpay_order_id,\r\n               razorpay_payment_id: response.razorpay_payment_id,\r\n               razorpay_signature: response.razorpay_signature,\r\n             }).unwrap();\r\n \r\n             if (verifyRes.success) {\r\n-              // STEP 3️⃣: Create order in DB\r\n+              // 3️⃣ Create order in DB\r\n               const order = await createOrder({\r\n                 orderItems: cart.cartItems.map((item) => ({\r\n                   name: item.name,\r\n                   qty: item.qty,\r\n@@ -254,13 +76,13 @@\n               dispatch(clearCartItems());\r\n               navigate(`/order/${order._id}`);\r\n             }\r\n           } catch (err) {\r\n-            toast.error(\"Payment verification failed\");\r\n+            toast.error(\"❌ Payment verification failed\");\r\n           }\r\n         },\r\n         prefill: {\r\n-          name: \"Customer Name\",\r\n+          name: \"Customer Name\", // 👉 You can replace this with user.name if logged in\r\n           email: \"customer@example.com\",\r\n           contact: \"9999999999\",\r\n         },\r\n         theme: { color: \"#F472B6\" },\r\n@@ -268,9 +90,9 @@\n \r\n       const razorpay = new window.Razorpay(options);\r\n       razorpay.open();\r\n     } catch (err) {\r\n-      toast.error(\"Payment initiation failed\");\r\n+      toast.error(\"❌ Payment initiation failed\");\r\n     }\r\n   };\r\n \r\n   return (\r\n@@ -283,9 +105,9 @@\n           <div className=\"overflow-x-auto\">\r\n             <table className=\"w-full border-collapse\">\r\n               <thead>\r\n                 <tr>\r\n-                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Image</td>\r\n                   <td className=\"px-1 py-2 text-left\">Product</td>\r\n                   <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n                   <td className=\"px-1 py-2 text-left\">Price</td>\r\n                   <td className=\"px-1 py-2 text-left\">Total</td>\r\n@@ -304,10 +126,10 @@\n                     <td className=\"p-2\">\r\n                       <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n                     </td>\r\n                     <td className=\"p-2\">{item.qty}</td>\r\n-                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n-                    <td className=\"p-2\">₹ {(item.qty * item.price).toFixed(2)}</td>\r\n+                    <td className=\"p-2\">₹{item.price.toFixed(2)}</td>\r\n+                    <td className=\"p-2\">₹{(item.qty * item.price).toFixed(2)}</td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n             </table>\r\n@@ -315,27 +137,27 @@\n         )}\r\n \r\n         <div className=\"mt-8\">\r\n           <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n-          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n-            <ul className=\"text-lg\">\r\n+          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818] rounded-md\">\r\n+            <ul className=\"text-lg mb-4\">\r\n               <li><strong>Items:</strong> ₹{cart.itemsPrice}</li>\r\n               <li><strong>Shipping:</strong> ₹{cart.shippingPrice}</li>\r\n               <li><strong>Tax:</strong> ₹{cart.taxPrice}</li>\r\n               <li><strong>Total:</strong> ₹{cart.totalPrice}</li>\r\n             </ul>\r\n \r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n+            <div className=\"mb-4\">\r\n+              <h2 className=\"text-2xl font-semibold mb-2\">Shipping</h2>\r\n               <p>\r\n                 <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n                 {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n                 {cart.shippingAddress.country}\r\n               </p>\r\n             </div>\r\n \r\n-            <div>\r\n-              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n+            <div className=\"mb-4\">\r\n+              <h2 className=\"text-2xl font-semibold mb-2\">Payment</h2>\r\n               <strong>Method:</strong> {cart.paymentMethod}\r\n             </div>\r\n           </div>\r\n \r\n"
                },
                {
                    "date": 1750500014923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,6 +175,8 @@\n       </div>\r\n     </>\r\n   );\r\n };\r\n+console.log(\"🔥 Razorpay Key:\", import.meta.env.VITE_RAZORPAY_KEY_ID);\r\n \r\n+\r\n export default PlaceOrder;\r\n"
                },
                {
                    "date": 1750500025017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,5 +178,6 @@\n };\r\n console.log(\"🔥 Razorpay Key:\", import.meta.env.VITE_RAZORPAY_KEY_ID);\r\n \r\n \r\n+\r\n export default PlaceOrder;\r\n"
                },
                {
                    "date": 1750501138365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n       </div>\r\n     </>\r\n   );\r\n };\r\n-console.log(\"🔥 Razorpay Key:\", import.meta.env.VITE_RAZORPAY_KEY_ID);\r\n \r\n \r\n \r\n+\r\n export default PlaceOrder;\r\n"
                },
                {
                    "date": 1750501296558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,20 @@\n       navigate(\"/shipping\");\r\n     }\r\n   }, [cart.shippingAddress.address, navigate]);\r\n \r\n-  \r\n+  useEffect(() => {\r\n+  if (!cart.shippingAddress.address) {\r\n+    navigate(\"/shipping\");\r\n+  }\r\n+}, [cart.shippingAddress.address, navigate]);\r\n \r\n+// 👇 Add this here\r\n+useEffect(() => {\r\n+  console.log(\"🧪 Razorpay Key in Frontend:\", import.meta.env.VITE_RAZORPAY_KEY_ID);\r\n+}, []);\r\n+\r\n+\r\n   const placeOrderHandler = async () => {\r\n     try {\r\n       // 1️⃣ Create Razorpay order\r\n       const razorpayOrder = await createRazorpayOrder({\r\n"
                },
                {
                    "date": 1750501305256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+import { useEffect } from \"react\";\r\n+import { Link, useNavigate } from \"react-router-dom\";\r\n+import { toast } from \"react-toastify\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+\r\n+import Message from \"../../components/Message\";\r\n+import ProgressSteps from \"../../components/ProgressSteps\";\r\n+import Loader from \"../../components/Loader\";\r\n+import { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n+\r\n+import {\r\n+  useCreateOrderMutation,\r\n+  useCreateRazorpayOrderMutation,\r\n+  useVerifyRazorpayPaymentMutation,\r\n+} from \"../../redux/api/orderApiSlice\";\r\n+\r\n+const PlaceOrder = () => {\r\n+  const navigate = useNavigate();\r\n+  const dispatch = useDispatch();\r\n+  const cart = useSelector((state) => state.cart);\r\n+\r\n+  const [createOrder, { isLoading }] = useCreateOrderMutation();\r\n+  const [createRazorpayOrder] = useCreateRazorpayOrderMutation();\r\n+  const [verifyRazorpayPayment] = useVerifyRazorpayPaymentMutation();\r\n+\r\n+  useEffect(() => {\r\n+    if (!cart.shippingAddress.address) {\r\n+      navigate(\"/shipping\");\r\n+    }\r\n+  }, [cart.shippingAddress.address, navigate]);\r\n+\r\n+  \r\n+\r\n+  const placeOrderHandler = async () => {\r\n+    try {\r\n+      // 1️⃣ Create Razorpay order\r\n+      const razorpayOrder = await createRazorpayOrder({\r\n+        amount: cart.totalPrice * 100,\r\n+        currency: \"INR\",\r\n+      }).unwrap();\r\n+\r\n+      const options = {\r\n+        key: import.meta.env.VITE_RAZORPAY_KEY_ID,\r\n+        amount: razorpayOrder.amount,\r\n+        currency: razorpayOrder.currency,\r\n+        order_id: razorpayOrder.id,\r\n+        name: \"Khaleel Store\",\r\n+        description: \"Order Payment\",\r\n+        handler: async (response) => {\r\n+          try {\r\n+            // 2️⃣ Verify Razorpay Signature\r\n+            const verifyRes = await verifyRazorpayPayment({\r\n+              razorpay_order_id: response.razorpay_order_id,\r\n+              razorpay_payment_id: response.razorpay_payment_id,\r\n+              razorpay_signature: response.razorpay_signature,\r\n+            }).unwrap();\r\n+\r\n+            if (verifyRes.success) {\r\n+              // 3️⃣ Create order in DB\r\n+              const order = await createOrder({\r\n+                orderItems: cart.cartItems.map((item) => ({\r\n+                  name: item.name,\r\n+                  qty: item.qty,\r\n+                  image: item.image,\r\n+                  price: item.price,\r\n+                  product: item._id || item.product,\r\n+                })),\r\n+                shippingAddress: cart.shippingAddress,\r\n+                paymentMethod: cart.paymentMethod,\r\n+                itemsPrice: cart.itemsPrice,\r\n+                shippingPrice: cart.shippingPrice,\r\n+                taxPrice: cart.taxPrice,\r\n+                totalPrice: cart.totalPrice,\r\n+                isPaid: true,\r\n+                paidAt: new Date().toISOString(),\r\n+              }).unwrap();\r\n+\r\n+              dispatch(clearCartItems());\r\n+              navigate(`/order/${order._id}`);\r\n+            }\r\n+          } catch (err) {\r\n+            toast.error(\"❌ Payment verification failed\");\r\n+          }\r\n+        },\r\n+        prefill: {\r\n+          name: \"Customer Name\", // 👉 You can replace this with user.name if logged in\r\n+          email: \"customer@example.com\",\r\n+          contact: \"9999999999\",\r\n+        },\r\n+        theme: { color: \"#F472B6\" },\r\n+      };\r\n+\r\n+      const razorpay = new window.Razorpay(options);\r\n+      razorpay.open();\r\n+    } catch (err) {\r\n+      toast.error(\"❌ Payment initiation failed\");\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <ProgressSteps step1 step2 step3 />\r\n+      <div className=\"container mx-auto mt-8\">\r\n+        {cart.cartItems.length === 0 ? (\r\n+          <Message>Your cart is empty</Message>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"w-full border-collapse\">\r\n+              <thead>\r\n+                <tr>\r\n+                  <td className=\"px-1 py-2 text-left\">Image</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n+                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {cart.cartItems.map((item, index) => (\r\n+                  <tr key={index}>\r\n+                    <td className=\"p-2\">\r\n+                      <img\r\n+                        src={item.image}\r\n+                        alt={item.name}\r\n+                        className=\"w-16 h-16 object-cover\"\r\n+                      />\r\n+                    </td>\r\n+                    <td className=\"p-2\">\r\n+                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n+                    </td>\r\n+                    <td className=\"p-2\">{item.qty}</td>\r\n+                    <td className=\"p-2\">₹{item.price.toFixed(2)}</td>\r\n+                    <td className=\"p-2\">₹{(item.qty * item.price).toFixed(2)}</td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-8\">\r\n+          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n+          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818] rounded-md\">\r\n+            <ul className=\"text-lg mb-4\">\r\n+              <li><strong>Items:</strong> ₹{cart.itemsPrice}</li>\r\n+              <li><strong>Shipping:</strong> ₹{cart.shippingPrice}</li>\r\n+              <li><strong>Tax:</strong> ₹{cart.taxPrice}</li>\r\n+              <li><strong>Total:</strong> ₹{cart.totalPrice}</li>\r\n+            </ul>\r\n+\r\n+            <div className=\"mb-4\">\r\n+              <h2 className=\"text-2xl font-semibold mb-2\">Shipping</h2>\r\n+              <p>\r\n+                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n+                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n+                {cart.shippingAddress.country}\r\n+              </p>\r\n+            </div>\r\n+\r\n+            <div className=\"mb-4\">\r\n+              <h2 className=\"text-2xl font-semibold mb-2\">Payment</h2>\r\n+              <strong>Method:</strong> {cart.paymentMethod}\r\n+            </div>\r\n+          </div>\r\n+\r\n+          <button\r\n+            type=\"button\"\r\n+            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n+            disabled={cart.cartItems.length === 0}\r\n+            onClick={placeOrderHandler}\r\n+          >\r\n+            Pay Now with Razorpay\r\n+          </button>\r\n+\r\n+          {isLoading && <Loader />}\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n+export default PlaceOrder;\r\n"
                }
            ],
            "date": 1750345071992,
            "name": "Commit-0",
            "content": "\r\nimport { useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Message from \"../../components/Message\";\r\nimport ProgressSteps from \"../../components/ProgressSteps\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { useCreateOrderMutation } from \"../../redux/api/orderApiSlice\";\r\nimport { clearCartItems } from \"../../redux/features/cart/cartSlice\";\r\n\r\nconst PlaceOrder = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  const [createOrder, { isLoading, error }] = useCreateOrderMutation();\r\n\r\n  useEffect(() => {\r\n    if (!cart.shippingAddress.address) {\r\n      navigate(\"/shipping\");\r\n    }\r\n  }, [cart.paymentMethod, cart.shippingAddress.address, navigate]);\r\n\r\n  const placeOrderHandler = async () => {\r\n    try {\r\n      const res = await createOrder({\r\n        orderItems: cart.cartItems.map((item) => ({\r\n          name: item.name,\r\n          qty: item.qty,\r\n          image: item.image,\r\n          price: item.price,\r\n          product: item._id || item.product, // ✅ Ensure product ID is sent\r\n        })),\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      }).unwrap();\r\n\r\n      dispatch(clearCartItems());\r\n      navigate(`/order/${res._id}`);\r\n    } catch (error) {\r\n      toast.error(error?.data?.error || \"Failed to place order\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ProgressSteps step1 step2 step3 />\r\n\r\n      <div className=\"container mx-auto mt-8\">\r\n        {cart.cartItems.length === 0 ? (\r\n          <Message>Your cart is empty</Message>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full border-collapse\">\r\n              <thead>\r\n                <tr>\r\n                  <td className=\"px-1 py-2 text-left align-top\">Image</td>\r\n                  <td className=\"px-1 py-2 text-left\">Product</td>\r\n                  <td className=\"px-1 py-2 text-left\">Quantity</td>\r\n                  <td className=\"px-1 py-2 text-left\">Price</td>\r\n                  <td className=\"px-1 py-2 text-left\">Total</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {cart.cartItems.map((item, index) => (\r\n                  <tr key={index}>\r\n                    <td className=\"p-2\">\r\n                      <img\r\n                        src={item.image}\r\n                        alt={item.name}\r\n                        className=\"w-16 h-16 object-cover\"\r\n                      />\r\n                    </td>\r\n                    <td className=\"p-2\">\r\n                      <Link to={`/product/${item.product || item._id}`}>{item.name}</Link>\r\n                    </td>\r\n                    <td className=\"p-2\">{item.qty}</td>\r\n                    <td className=\"p-2\">{item.price.toFixed(2)}</td>\r\n                    <td className=\"p-2\">\r\n                      $ {(item.qty * item.price).toFixed(2)}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mt-8\">\r\n          <h2 className=\"text-2xl font-semibold mb-5\">Order Summary</h2>\r\n          <div className=\"flex justify-between flex-wrap p-8 bg-[#181818]\">\r\n            <ul className=\"text-lg\">\r\n              <li>\r\n                <span className=\"font-semibold mb-4\">Items:</span> ${cart.itemsPrice}\r\n              </li>\r\n              <li>\r\n                <span className=\"font-semibold mb-4\">Shipping:</span> ${cart.shippingPrice}\r\n              </li>\r\n              <li>\r\n                <span className=\"font-semibold mb-4\">Tax:</span> ${cart.taxPrice}\r\n              </li>\r\n              <li>\r\n                <span className=\"font-semibold mb-4\">Total:</span> ${cart.totalPrice}\r\n              </li>\r\n            </ul>\r\n\r\n            {error && <Message variant=\"danger\">{error.data.message}</Message>}\r\n\r\n            <div>\r\n              <h2 className=\"text-2xl font-semibold mb-4\">Shipping</h2>\r\n              <p>\r\n                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\r\n                {cart.shippingAddress.city} {cart.shippingAddress.postalCode},{\" \"}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </div>\r\n\r\n            <div>\r\n              <h2 className=\"text-2xl font-semibold mb-4\">Payment Method</h2>\r\n              <strong>Method:</strong> {cart.paymentMethod}\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"bg-pink-500 text-white py-2 px-4 rounded-full text-lg w-full mt-4\"\r\n            disabled={cart.cartItems.length === 0}\r\n            onClick={placeOrderHandler}\r\n          >\r\n            Place Order\r\n          </button>\r\n\r\n          {isLoading && <Loader />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrder;\r\n"
        }
    ]
}