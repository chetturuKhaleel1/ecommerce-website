{
    "sourceFile": "backend/controllers/paymentController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1750345699983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750350187890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import Razorpay from 'razorpay';\r\n+import crypto from 'crypto';\r\n+\r\n+export const createRazorpayOrder = async (req, res) => {\r\n+  try {\r\n+    // ‚úÖ Check Razorpay credentials\r\n+    const { RAZORPAY_KEY_ID, VITE_RAZORPAY_KEY_SECRET } = process.env;\r\n+\r\n+    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n+      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n+    }\r\n+\r\n+    // ‚úÖ Razorpay instance\r\n+    const razorpay = new Razorpay({\r\n+      key_id: RAZORPAY_KEY_ID,\r\n+      key_secret: RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const { amount } = req.body;\r\n+\r\n+    if (!amount) {\r\n+      return res.status(400).json({ message: \"Amount is required\" });\r\n+    }\r\n+\r\n+    // ‚úÖ Create order\r\n+    const options = {\r\n+      amount: Math.round(amount * 100), // ‚Çπ100 -> 10000 paise\r\n+      currency: 'INR',\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.status(200).json(order);\r\n+\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n+    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+export const verifyRazorpayPayment = (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n+  try {\r\n+    const expectedSignature = crypto\r\n+      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n+      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n+      .digest('hex');\r\n+\r\n+    if (expectedSignature === razorpay_signature) {\r\n+      res.status(200).json({ success: true });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n+    }\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n+    res.status(500).json({ success: false, message: err.message });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1750350889012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,63 +56,4 @@\n     console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n     res.status(500).json({ success: false, message: err.message });\r\n   }\r\n };\r\n-import Razorpay from 'razorpay';\r\n-import crypto from 'crypto';\r\n-\r\n-export const createRazorpayOrder = async (req, res) => {\r\n-  try {\r\n-    // ‚úÖ Check Razorpay credentials\r\n-    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n-\r\n-    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n-      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n-    }\r\n-\r\n-    // ‚úÖ Razorpay instance\r\n-    const razorpay = new Razorpay({\r\n-      key_id: RAZORPAY_KEY_ID,\r\n-      key_secret: RAZORPAY_KEY_SECRET,\r\n-    });\r\n-\r\n-    const { amount } = req.body;\r\n-\r\n-    if (!amount) {\r\n-      return res.status(400).json({ message: \"Amount is required\" });\r\n-    }\r\n-\r\n-    // ‚úÖ Create order\r\n-    const options = {\r\n-      amount: Math.round(amount * 100), // ‚Çπ100 -> 10000 paise\r\n-      currency: 'INR',\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n-\r\n-    const order = await razorpay.orders.create(options);\r\n-    res.status(200).json(order);\r\n-\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n-    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-export const verifyRazorpayPayment = (req, res) => {\r\n-  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-\r\n-  try {\r\n-    const expectedSignature = crypto\r\n-      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n-      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n-      .digest('hex');\r\n-\r\n-    if (expectedSignature === razorpay_signature) {\r\n-      res.status(200).json({ success: true });\r\n-    } else {\r\n-      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n-    }\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n-    res.status(500).json({ success: false, message: err.message });\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1750498149583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,23 +37,37 @@\n     res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n };\r\n \r\n-export const verifyRazorpayPayment = (req, res) => {\r\n-  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-\r\n+export const createRazorpayOrder = async (req, res) => {\r\n   try {\r\n-    const expectedSignature = crypto\r\n-      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n-      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n-      .digest('hex');\r\n+    // ‚úÖ Correct destructuring\r\n+    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n \r\n-    if (expectedSignature === razorpay_signature) {\r\n-      res.status(200).json({ success: true });\r\n-    } else {\r\n-      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n+    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n+      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n     }\r\n+\r\n+    const razorpay = new Razorpay({\r\n+      key_id: RAZORPAY_KEY_ID,\r\n+      key_secret: RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const { amount } = req.body;\r\n+    if (!amount) {\r\n+      return res.status(400).json({ message: \"Amount is required\" });\r\n+    }\r\n+\r\n+    const options = {\r\n+      amount: Math.round(amount * 100),\r\n+      currency: 'INR',\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.status(200).json(order);\r\n   } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n-    res.status(500).json({ success: false, message: err.message });\r\n+    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n+    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n };\r\n+\r\n"
                },
                {
                    "date": 1750498158596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,5 +69,8 @@\n     console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n     res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n };\r\n-\r\n+console.log(\"üß™ Razorpay Keys\", {\r\n+  id: RAZORPAY_KEY_ID,\r\n+  secret: RAZORPAY_KEY_SECRET,\r\n+});\r\n"
                },
                {
                    "date": 1750498217823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,75 +2,59 @@\n import crypto from 'crypto';\r\n \r\n export const createRazorpayOrder = async (req, res) => {\r\n   try {\r\n-    // ‚úÖ Check Razorpay credentials\r\n-    const { RAZORPAY_KEY_ID, VITE_RAZORPAY_KEY_SECRET } = process.env;\r\n+    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n \r\n     if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n       throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n     }\r\n \r\n-    // ‚úÖ Razorpay instance\r\n     const razorpay = new Razorpay({\r\n       key_id: RAZORPAY_KEY_ID,\r\n       key_secret: RAZORPAY_KEY_SECRET,\r\n     });\r\n \r\n     const { amount } = req.body;\r\n-\r\n     if (!amount) {\r\n       return res.status(400).json({ message: \"Amount is required\" });\r\n     }\r\n \r\n-    // ‚úÖ Create order\r\n     const options = {\r\n-      amount: Math.round(amount * 100), // ‚Çπ100 -> 10000 paise\r\n+      amount: Math.round(amount * 100),\r\n       currency: 'INR',\r\n       receipt: `receipt_order_${Date.now()}`,\r\n     };\r\n \r\n     const order = await razorpay.orders.create(options);\r\n     res.status(200).json(order);\r\n-\r\n   } catch (err) {\r\n     console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n     res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n };\r\n \r\n-export const createRazorpayOrder = async (req, res) => {\r\n+export const verifyRazorpayPayment = (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n   try {\r\n-    // ‚úÖ Correct destructuring\r\n-    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n+    const expectedSignature = crypto\r\n+      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n+      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n+      .digest('hex');\r\n \r\n-    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n-      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n+    if (expectedSignature === razorpay_signature) {\r\n+      res.status(200).json({ success: true });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n     }\r\n-\r\n-    const razorpay = new Razorpay({\r\n-      key_id: RAZORPAY_KEY_ID,\r\n-      key_secret: RAZORPAY_KEY_SECRET,\r\n-    });\r\n-\r\n-    const { amount } = req.body;\r\n-    if (!amount) {\r\n-      return res.status(400).json({ message: \"Amount is required\" });\r\n-    }\r\n-\r\n-    const options = {\r\n-      amount: Math.round(amount * 100),\r\n-      currency: 'INR',\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n-\r\n-    const order = await razorpay.orders.create(options);\r\n-    res.status(200).json(order);\r\n   } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n-    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n+    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n+    res.status(500).json({ success: false, message: err.message });\r\n   }\r\n };\r\n+\r\n+// ‚úÖ Optional Debug Logging\r\n console.log(\"üß™ Razorpay Keys\", {\r\n-  id: RAZORPAY_KEY_ID,\r\n-  secret: RAZORPAY_KEY_SECRET,\r\n+  id: process.env.RAZORPAY_KEY_ID,\r\n+  secret: process.env.RAZORPAY_KEY_SECRET,\r\n });\r\n"
                },
                {
                    "date": 1750498455252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\r\n import Razorpay from 'razorpay';\r\n import crypto from 'crypto';\r\n \r\n export const createRazorpayOrder = async (req, res) => {\r\n"
                },
                {
                    "date": 1750498766798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import '\r\n+\r\n+import Razorpay from 'razorpay';\r\n+import crypto from 'crypto';\r\n+\r\n+export const createRazorpayOrder = async (req, res) => {\r\n+  try {\r\n+    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n+\r\n+    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n+      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n+    }\r\n+\r\n+    const razorpay = new Razorpay({\r\n+      key_id: RAZORPAY_KEY_ID,\r\n+      key_secret: RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const { amount } = req.body;\r\n+    if (!amount) {\r\n+      return res.status(400).json({ message: \"Amount is required\" });\r\n+    }\r\n+\r\n+    const options = {\r\n+      amount: Math.round(amount * 100),\r\n+      currency: 'INR',\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.status(200).json(order);\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n+    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+export const verifyRazorpayPayment = (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n+  try {\r\n+    const expectedSignature = crypto\r\n+      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n+      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n+      .digest('hex');\r\n+\r\n+    if (expectedSignature === razorpay_signature) {\r\n+      res.status(200).json({ success: true });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n+    }\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n+    res.status(500).json({ success: false, message: err.message });\r\n+  }\r\n+};\r\n+\r\n+// ‚úÖ Optional Debug Logging\r\n+console.log(\"üß™ Razorpay Keys\", {\r\n+  id: process.env.RAZORPAY_KEY_ID,\r\n+  secret: process.env.RAZORPAY_KEY_SECRET,\r\n+});\r\n"
                },
                {
                    "date": 1750498772982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import '\r\n+import '../config/loadEnv.js';\r\n \r\n import Razorpay from 'razorpay';\r\n import crypto from 'crypto';\r\n \r\n@@ -59,65 +59,4 @@\n console.log(\"üß™ Razorpay Keys\", {\r\n   id: process.env.RAZORPAY_KEY_ID,\r\n   secret: process.env.RAZORPAY_KEY_SECRET,\r\n });\r\n-\r\n-import Razorpay from 'razorpay';\r\n-import crypto from 'crypto';\r\n-\r\n-export const createRazorpayOrder = async (req, res) => {\r\n-  try {\r\n-    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n-\r\n-    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n-      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n-    }\r\n-\r\n-    const razorpay = new Razorpay({\r\n-      key_id: RAZORPAY_KEY_ID,\r\n-      key_secret: RAZORPAY_KEY_SECRET,\r\n-    });\r\n-\r\n-    const { amount } = req.body;\r\n-    if (!amount) {\r\n-      return res.status(400).json({ message: \"Amount is required\" });\r\n-    }\r\n-\r\n-    const options = {\r\n-      amount: Math.round(amount * 100),\r\n-      currency: 'INR',\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n-\r\n-    const order = await razorpay.orders.create(options);\r\n-    res.status(200).json(order);\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n-    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-export const verifyRazorpayPayment = (req, res) => {\r\n-  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-\r\n-  try {\r\n-    const expectedSignature = crypto\r\n-      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n-      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n-      .digest('hex');\r\n-\r\n-    if (expectedSignature === razorpay_signature) {\r\n-      res.status(200).json({ success: true });\r\n-    } else {\r\n-      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n-    }\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n-    res.status(500).json({ success: false, message: err.message });\r\n-  }\r\n-};\r\n-\r\n-// ‚úÖ Optional Debug Logging\r\n-console.log(\"üß™ Razorpay Keys\", {\r\n-  id: process.env.RAZORPAY_KEY_ID,\r\n-  secret: process.env.RAZORPAY_KEY_SECRET,\r\n-});\r\n"
                },
                {
                    "date": 1750498782352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import '../config/loadEnv';\r\n+\r\n+import Razorpay from 'razorpay';\r\n+import crypto from 'crypto';\r\n+\r\n+export const createRazorpayOrder = async (req, res) => {\r\n+  try {\r\n+    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n+\r\n+    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n+      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n+    }\r\n+\r\n+    const razorpay = new Razorpay({\r\n+      key_id: RAZORPAY_KEY_ID,\r\n+      key_secret: RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const { amount } = req.body;\r\n+    if (!amount) {\r\n+      return res.status(400).json({ message: \"Amount is required\" });\r\n+    }\r\n+\r\n+    const options = {\r\n+      amount: Math.round(amount * 100),\r\n+      currency: 'INR',\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.status(200).json(order);\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n+    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+export const verifyRazorpayPayment = (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n+  try {\r\n+    const expectedSignature = crypto\r\n+      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n+      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n+      .digest('hex');\r\n+\r\n+    if (expectedSignature === razorpay_signature) {\r\n+      res.status(200).json({ success: true });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n+    }\r\n+  } catch (err) {\r\n+    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n+    res.status(500).json({ success: false, message: err.message });\r\n+  }\r\n+};\r\n+\r\n+// ‚úÖ Optional Debug Logging\r\n+console.log(\"üß™ Razorpay Keys\", {\r\n+  id: process.env.RAZORPAY_KEY_ID,\r\n+  secret: process.env.RAZORPAY_KEY_SECRET,\r\n+});\r\n"
                },
                {
                    "date": 1750656559039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,4 @@\n-import '../config/loadEnv';\r\n-\r\n-import Razorpay from 'razorpay';\r\n-import crypto from 'crypto';\r\n-\r\n-export const createRazorpayOrder = async (req, res) => {\r\n-  try {\r\n-    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n-\r\n-    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n-      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n-    }\r\n-\r\n-    const razorpay = new Razorpay({\r\n-      key_id: RAZORPAY_KEY_ID,\r\n-      key_secret: RAZORPAY_KEY_SECRET,\r\n-    });\r\n-\r\n-    const { amount } = req.body;\r\n-    if (!amount) {\r\n-      return res.status(400).json({ message: \"Amount is required\" });\r\n-    }\r\n-\r\n-    const options = {\r\n-      amount: Math.round(amount * 100),\r\n-      currency: 'INR',\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n-\r\n-    const order = await razorpay.orders.create(options);\r\n-    res.status(200).json(order);\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n-    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-export const verifyRazorpayPayment = (req, res) => {\r\n-  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-\r\n-  try {\r\n-    const expectedSignature = crypto\r\n-      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n-      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n-      .digest('hex');\r\n-\r\n-    if (expectedSignature === razorpay_signature) {\r\n-      res.status(200).json({ success: true });\r\n-    } else {\r\n-      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n-    }\r\n-  } catch (err) {\r\n-    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n-    res.status(500).json({ success: false, message: err.message });\r\n-  }\r\n-};\r\n-\r\n-// ‚úÖ Optional Debug Logging\r\n-console.log(\"üß™ Razorpay Keys\", {\r\n-  id: process.env.RAZORPAY_KEY_ID,\r\n-  secret: process.env.RAZORPAY_KEY_SECRET,\r\n-});\r\n import '../config/loadEnv.js';\r\n \r\n import Razorpay from 'razorpay';\r\n import crypto from 'crypto';\r\n@@ -77,21 +15,21 @@\n       key_id: RAZORPAY_KEY_ID,\r\n       key_secret: RAZORPAY_KEY_SECRET,\r\n     });\r\n \r\n-    const { amount } = req.body;\r\n-    if (!amount) {\r\n-      return res.status(400).json({ message: \"Amount is required\" });\r\n-    }\r\n+    // const { amount } = req.body;\r\n+    // if (!amount) {\r\n+    //   return res.status(400).json({ message: \"Amount is required\" });\r\n+    // }\r\n \r\n-    const options = {\r\n-      amount: Math.round(amount * 100),\r\n-      currency: 'INR',\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n+    // const options = {\r\n+    //   amount: Math.round(amount * 100),\r\n+    //   currency: 'INR',\r\n+    //   receipt: `receipt_order_${Date.now()}`,\r\n+    // };\r\n \r\n-    const order = await razorpay.orders.create(options);\r\n-    res.status(200).json(order);\r\n+    // const order = await razorpay.orders.create(options);\r\n+    // res.status(200).json(order);\r\n   } catch (err) {\r\n     console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n     res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1753202682411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,21 +15,27 @@\n       key_id: RAZORPAY_KEY_ID,\r\n       key_secret: RAZORPAY_KEY_SECRET,\r\n     });\r\n \r\n-    // const { amount } = req.body;\r\n-    // if (!amount) {\r\n-    //   return res.status(400).json({ message: \"Amount is required\" });\r\n-    // }\r\n+ \r\n \r\n-    // const options = {\r\n-    //   amount: Math.round(amount * 100),\r\n-    //   currency: 'INR',\r\n-    //   receipt: `receipt_order_${Date.now()}`,\r\n-    // };\r\n+const { amount } = req.body;\r\n+if (!amount) {\r\n+  return res.status(400).json({ message: \"Amount is required\" });\r\n+}\r\n \r\n-    // const order = await razorpay.orders.create(options);\r\n-    // res.status(200).json(order);\r\n+const options = {\r\n+  amount, // ‚úÖ already converted on frontend\r\n+  currency: 'INR',\r\n+  receipt: `receipt_order_${Date.now()}`,\r\n+};\r\n+\r\n+const order = await razorpay.orders.create(options);\r\n+res.status(200).json(order);\r\n+\r\n+\r\n+\r\n+\r\n   } catch (err) {\r\n     console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n     res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n   }\r\n"
                }
            ],
            "date": 1750345699983,
            "name": "Commit-0",
            "content": "import Razorpay from 'razorpay';\r\nimport crypto from 'crypto';\r\n\r\nexport const createRazorpayOrder = async (req, res) => {\r\n  try {\r\n    // ‚úÖ Check Razorpay credentials\r\n    const { RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET } = process.env;\r\n\r\n    if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\r\n      throw new Error(\"‚ùå Razorpay keys are missing in environment variables.\");\r\n    }\r\n\r\n    // ‚úÖ Razorpay instance\r\n    const razorpay = new Razorpay({\r\n      key_id: RAZORPAY_KEY_ID,\r\n      key_secret: RAZORPAY_KEY_SECRET,\r\n    });\r\n\r\n    const { amount } = req.body;\r\n\r\n    if (!amount) {\r\n      return res.status(400).json({ message: \"Amount is required\" });\r\n    }\r\n\r\n    // ‚úÖ Create order\r\n    const options = {\r\n      amount: Math.round(amount * 100), // ‚Çπ100 -> 10000 paise\r\n      currency: 'INR',\r\n      receipt: `receipt_order_${Date.now()}`,\r\n    };\r\n\r\n    const order = await razorpay.orders.create(options);\r\n    res.status(200).json(order);\r\n\r\n  } catch (err) {\r\n    console.error(\"‚ùå Razorpay Order Creation Error:\", err.message);\r\n    res.status(500).json({ message: 'Razorpay order failed', error: err.message });\r\n  }\r\n};\r\n\r\nexport const verifyRazorpayPayment = (req, res) => {\r\n  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n\r\n  try {\r\n    const expectedSignature = crypto\r\n      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)\r\n      .update(`${razorpay_order_id}|${razorpay_payment_id}`)\r\n      .digest('hex');\r\n\r\n    if (expectedSignature === razorpay_signature) {\r\n      res.status(200).json({ success: true });\r\n    } else {\r\n      res.status(400).json({ success: false, message: 'Invalid signature' });\r\n    }\r\n  } catch (err) {\r\n    console.error(\"‚ùå Razorpay Signature Verification Error:\", err.message);\r\n    res.status(500).json({ success: false, message: err.message });\r\n  }\r\n};\r\n"
        }
    ]
}