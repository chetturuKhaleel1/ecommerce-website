{
    "sourceFile": "backend/controllers/orderController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750334594876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750506458823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n import Order from \"../models/orderModel.js\";\r\n import Product from \"../models/productModel.js\";\r\n \r\n-// Utility Function\r\n+// ðŸ”¢ Utility: Price Calculation\r\n function calcPrices(orderItems) {\r\n   const itemsPrice = orderItems.reduce(\r\n     (acc, item) => acc + item.price * item.qty,\r\n     0\r\n   );\r\n-\r\n   const shippingPrice = itemsPrice > 100 ? 0 : 10;\r\n   const taxRate = 0.15;\r\n   const taxPrice = (itemsPrice * taxRate).toFixed(2);\r\n \r\n@@ -25,43 +24,54 @@\n     totalPrice,\r\n   };\r\n }\r\n \r\n+// âœ… Create Order (Razorpay Supported)\r\n const createOrder = async (req, res) => {\r\n   try {\r\n-    const { orderItems, shippingAddress, paymentMethod } = req.body;\r\n+    const {\r\n+      orderItems,\r\n+      shippingAddress,\r\n+      paymentMethod,\r\n+      isPaid,\r\n+      paidAt,\r\n+    } = req.body;\r\n \r\n-    if (orderItems && orderItems.length === 0) {\r\n+    if (!orderItems || orderItems.length === 0) {\r\n       res.status(400);\r\n-      throw new Error(\"No order items\");\r\n+      throw new Error(\"No order items provided\");\r\n     }\r\n \r\n-  const itemsFromDB = await Product.find({\r\n-  _id: { $in: orderItems.map((x) => x.product) },\r\n-});\r\n+    // ðŸ›’ Match DB Products for Price Validation\r\n+    const itemsFromDB = await Product.find({\r\n+      _id: { $in: orderItems.map((x) => x.product || x._id) },\r\n+    });\r\n \r\n-const dbOrderItems = orderItems.map((itemFromClient) => {\r\n-  const matchingItemFromDB = itemsFromDB.find(\r\n-    (itemFromDB) => itemFromDB._id.toString() === itemFromClient.product\r\n-  );\r\n+    const dbOrderItems = orderItems.map((clientItem) => {\r\n+      const productId = clientItem.product || clientItem._id;\r\n+      const dbItem = itemsFromDB.find(\r\n+        (p) => p._id.toString() === productId\r\n+      );\r\n \r\n-  if (!matchingItemFromDB) {\r\n-    res.status(404);\r\n-    throw new Error(`Product not found: ${itemFromClient.product}`);\r\n-  }\r\n+      if (!dbItem) {\r\n+        res.status(404);\r\n+        throw new Error(`Product not found: ${productId}`);\r\n+      }\r\n \r\n-  return {\r\n-    ...itemFromClient,\r\n-    product: itemFromClient.product,\r\n-    price: matchingItemFromDB.price,\r\n-    _id: undefined, // Optional: to avoid duplicate _id conflicts\r\n-  };\r\n-});\r\n+      return {\r\n+        name: clientItem.name,\r\n+        qty: clientItem.qty,\r\n+        image: clientItem.image,\r\n+        price: dbItem.price,\r\n+        product: productId,\r\n+      };\r\n+    });\r\n \r\n-\r\n+    // ðŸ’° Calculate Accurate Prices\r\n     const { itemsPrice, taxPrice, shippingPrice, totalPrice } =\r\n       calcPrices(dbOrderItems);\r\n \r\n+    // ðŸ“¦ Create Order Document\r\n     const order = new Order({\r\n       orderItems: dbOrderItems,\r\n       user: req.user._id,\r\n       shippingAddress,\r\n@@ -69,8 +79,10 @@\n       itemsPrice,\r\n       taxPrice,\r\n       shippingPrice,\r\n       totalPrice,\r\n+      isPaid: isPaid || false,\r\n+      paidAt: isPaid ? paidAt || Date.now() : null,\r\n     });\r\n \r\n     const createdOrder = await order.save();\r\n     res.status(201).json(createdOrder);\r\n@@ -78,78 +90,74 @@\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-const getAllOrders = async (req, res) => {\r\n+// âœ… Mark Order as Paid (optional via Razorpay webhook or manual patch)\r\n+const markOrderAsPaid = async (req, res) => {\r\n   try {\r\n-    const orders = await Order.find({}).populate(\"user\", \"id username\");\r\n-    res.json(orders);\r\n-  } catch (error) {\r\n-    res.status(500).json({ error: error.message });\r\n-  }\r\n-};\r\n+    const order = await Order.findById(req.params.id);\r\n \r\n+    if (!order) {\r\n+      res.status(404);\r\n+      throw new Error(\"Order not found\");\r\n+    }\r\n \r\n+    order.isPaid = true;\r\n+    order.paidAt = Date.now();\r\n+    order.paymentResult = {\r\n+      id: req.body.id || \"manual\",\r\n+      status: req.body.status || \"COMPLETED\",\r\n+      update_time: req.body.update_time || new Date().toISOString(),\r\n+      email_address: req.body.payer?.email_address || \"unknown@razorpay.com\",\r\n+    };\r\n \r\n-\r\n-const getUserOrders = async (req, res) => {\r\n-  try {\r\n-    const orders = await Order.find({ user: req.user._id });\r\n-    res.json(orders);\r\n+    const updatedOrder = await order.save();\r\n+    res.status(200).json(updatedOrder);\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n+// âœ… Mark Order as Delivered\r\n+const markOrderAsDelivered = async (req, res) => {\r\n+  try {\r\n+    const order = await Order.findById(req.params.id);\r\n+    if (!order) {\r\n+      res.status(404);\r\n+      throw new Error(\"Order not found\");\r\n+    }\r\n \r\n+    order.isDelivered = true;\r\n+    order.deliveredAt = Date.now();\r\n \r\n-const countTotalOrders = async (req, res) => {\r\n-  try {\r\n-    const totalOrders = await Order.countDocuments();\r\n-    res.json({ totalOrders });\r\n+    const updatedOrder = await order.save();\r\n+    res.json(updatedOrder);\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n-const calculateTotalSales = async (req, res) => {\r\n+// âœ… Get All Orders (Admin)\r\n+const getAllOrders = async (req, res) => {\r\n   try {\r\n-    const orders = await Order.find();\r\n-    const totalSales = orders.reduce((sum, order) => sum + order.totalPrice, 0);\r\n-    res.json({ totalSales });\r\n+    const orders = await Order.find({}).populate(\"user\", \"id username\");\r\n+    res.json(orders);\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n-const calcualteTotalSalesByDate = async (req, res) => {\r\n+// âœ… Get User Orders\r\n+const getUserOrders = async (req, res) => {\r\n   try {\r\n-    const salesByDate = await Order.aggregate([\r\n-      {\r\n-        $match: {\r\n-          isPaid: true,\r\n-        },\r\n-      },\r\n-      {\r\n-        $group: {\r\n-          _id: {\r\n-            $dateToString: { format: \"%Y-%m-%d\", date: \"$paidAt\" },\r\n-          },\r\n-          totalSales: { $sum: \"$totalPrice\" },\r\n-        },\r\n-      },\r\n-    ]);\r\n-\r\n-    res.json(salesByDate);\r\n+    const orders = await Order.find({ user: req.user._id });\r\n+    res.json(orders);\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n-\r\n+// âœ… Find Order by ID\r\n const findOrderById = async (req, res) => {\r\n   try {\r\n     const order = await Order.findById(req.params.id).populate(\r\n       \"user\",\r\n@@ -166,64 +174,58 @@\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n+// âœ… Count Total Orders\r\n+const countTotalOrders = async (req, res) => {\r\n+  try {\r\n+    const totalOrders = await Order.countDocuments();\r\n+    res.json({ totalOrders });\r\n+  } catch (error) {\r\n+    res.status(500).json({ error: error.message });\r\n+  }\r\n+};\r\n \r\n-const markOrderAsPaid = async (req, res) => {\r\n+// âœ… Calculate Total Sales\r\n+const calculateTotalSales = async (req, res) => {\r\n   try {\r\n-    const order = await Order.findById(req.params.id);\r\n-\r\n-    if (order) {\r\n-      order.isPaid = true;\r\n-      order.paidAt = Date.now();\r\n-      order.paymentResult = {\r\n-        id: req.body.id,\r\n-        status: req.body.status,\r\n-        update_time: req.body.update_time,\r\n-        email_address: req.body.payer.email_address,\r\n-      };\r\n-\r\n-      const updateOrder = await order.save();\r\n-      res.status(200).json(updateOrder);\r\n-    } else {\r\n-      res.status(404);\r\n-      throw new Error(\"Order not found\");\r\n-    }\r\n+    const orders = await Order.find();\r\n+    const totalSales = orders.reduce(\r\n+      (sum, order) => sum + Number(order.totalPrice),\r\n+      0\r\n+    );\r\n+    res.json({ totalSales });\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n-const markOrderAsDelivered = async (req, res) => {\r\n+// âœ… Sales by Date (for graphs)\r\n+const calcualteTotalSalesByDate = async (req, res) => {\r\n   try {\r\n-    //get details\r\n-    const order = await Order.findById(req.params.id);\r\n+    const salesByDate = await Order.aggregate([\r\n+      { $match: { isPaid: true } },\r\n+      {\r\n+        $group: {\r\n+          _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$paidAt\" } },\r\n+          totalSales: { $sum: \"$totalPrice\" },\r\n+        },\r\n+      },\r\n+    ]);\r\n \r\n\\ No newline at end of file\n-    if (order) {\r\n-      order.isDelivered = true;\r\n-      order.deliveredAt = Date.now();\r\n-\r\n-      const updatedOrder = await order.save();\r\n-      res.json(updatedOrder);\r\n-    } else {\r\n-      res.status(404);\r\n-      throw new Error(\"Order not found\");\r\n-    }\r\n+    res.json(salesByDate);\r\n   } catch (error) {\r\n     res.status(500).json({ error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n export {\r\n-  createOrder,getAllOrders,getUserOrders,countTotalOrders,\r\n-  calculateTotalSales,calcualteTotalSalesByDate,\r\n-   findOrderById,\r\n-    markOrderAsPaid,\r\n-     markOrderAsDelivered\r\n-\r\n-};\n+  createOrder,\r\n+  getAllOrders,\r\n+  getUserOrders,\r\n+  countTotalOrders,\r\n+  calculateTotalSales,\r\n+  calcualteTotalSalesByDate,\r\n+  findOrderById,\r\n+  markOrderAsPaid,\r\n+  markOrderAsDelivered,\r\n+};\r\n"
                }
            ],
            "date": 1750334594876,
            "name": "Commit-0",
            "content": "import Order from \"../models/orderModel.js\";\r\nimport Product from \"../models/productModel.js\";\r\n\r\n// Utility Function\r\nfunction calcPrices(orderItems) {\r\n  const itemsPrice = orderItems.reduce(\r\n    (acc, item) => acc + item.price * item.qty,\r\n    0\r\n  );\r\n\r\n  const shippingPrice = itemsPrice > 100 ? 0 : 10;\r\n  const taxRate = 0.15;\r\n  const taxPrice = (itemsPrice * taxRate).toFixed(2);\r\n\r\n  const totalPrice = (\r\n    itemsPrice +\r\n    shippingPrice +\r\n    parseFloat(taxPrice)\r\n  ).toFixed(2);\r\n\r\n  return {\r\n    itemsPrice: itemsPrice.toFixed(2),\r\n    shippingPrice: shippingPrice.toFixed(2),\r\n    taxPrice,\r\n    totalPrice,\r\n  };\r\n}\r\n\r\nconst createOrder = async (req, res) => {\r\n  try {\r\n    const { orderItems, shippingAddress, paymentMethod } = req.body;\r\n\r\n    if (orderItems && orderItems.length === 0) {\r\n      res.status(400);\r\n      throw new Error(\"No order items\");\r\n    }\r\n\r\n  const itemsFromDB = await Product.find({\r\n  _id: { $in: orderItems.map((x) => x.product) },\r\n});\r\n\r\nconst dbOrderItems = orderItems.map((itemFromClient) => {\r\n  const matchingItemFromDB = itemsFromDB.find(\r\n    (itemFromDB) => itemFromDB._id.toString() === itemFromClient.product\r\n  );\r\n\r\n  if (!matchingItemFromDB) {\r\n    res.status(404);\r\n    throw new Error(`Product not found: ${itemFromClient.product}`);\r\n  }\r\n\r\n  return {\r\n    ...itemFromClient,\r\n    product: itemFromClient.product,\r\n    price: matchingItemFromDB.price,\r\n    _id: undefined, // Optional: to avoid duplicate _id conflicts\r\n  };\r\n});\r\n\r\n\r\n    const { itemsPrice, taxPrice, shippingPrice, totalPrice } =\r\n      calcPrices(dbOrderItems);\r\n\r\n    const order = new Order({\r\n      orderItems: dbOrderItems,\r\n      user: req.user._id,\r\n      shippingAddress,\r\n      paymentMethod,\r\n      itemsPrice,\r\n      taxPrice,\r\n      shippingPrice,\r\n      totalPrice,\r\n    });\r\n\r\n    const createdOrder = await order.save();\r\n    res.status(201).json(createdOrder);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\nconst getAllOrders = async (req, res) => {\r\n  try {\r\n    const orders = await Order.find({}).populate(\"user\", \"id username\");\r\n    res.json(orders);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nconst getUserOrders = async (req, res) => {\r\n  try {\r\n    const orders = await Order.find({ user: req.user._id });\r\n    res.json(orders);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\n\r\nconst countTotalOrders = async (req, res) => {\r\n  try {\r\n    const totalOrders = await Order.countDocuments();\r\n    res.json({ totalOrders });\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\nconst calculateTotalSales = async (req, res) => {\r\n  try {\r\n    const orders = await Order.find();\r\n    const totalSales = orders.reduce((sum, order) => sum + order.totalPrice, 0);\r\n    res.json({ totalSales });\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\nconst calcualteTotalSalesByDate = async (req, res) => {\r\n  try {\r\n    const salesByDate = await Order.aggregate([\r\n      {\r\n        $match: {\r\n          isPaid: true,\r\n        },\r\n      },\r\n      {\r\n        $group: {\r\n          _id: {\r\n            $dateToString: { format: \"%Y-%m-%d\", date: \"$paidAt\" },\r\n          },\r\n          totalSales: { $sum: \"$totalPrice\" },\r\n        },\r\n      },\r\n    ]);\r\n\r\n    res.json(salesByDate);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\n\r\nconst findOrderById = async (req, res) => {\r\n  try {\r\n    const order = await Order.findById(req.params.id).populate(\r\n      \"user\",\r\n      \"username email\"\r\n    );\r\n\r\n    if (order) {\r\n      res.json(order);\r\n    } else {\r\n      res.status(404);\r\n      throw new Error(\"Order not found\");\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\nconst markOrderAsPaid = async (req, res) => {\r\n  try {\r\n    const order = await Order.findById(req.params.id);\r\n\r\n    if (order) {\r\n      order.isPaid = true;\r\n      order.paidAt = Date.now();\r\n      order.paymentResult = {\r\n        id: req.body.id,\r\n        status: req.body.status,\r\n        update_time: req.body.update_time,\r\n        email_address: req.body.payer.email_address,\r\n      };\r\n\r\n      const updateOrder = await order.save();\r\n      res.status(200).json(updateOrder);\r\n    } else {\r\n      res.status(404);\r\n      throw new Error(\"Order not found\");\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\nconst markOrderAsDelivered = async (req, res) => {\r\n  try {\r\n    //get details\r\n    const order = await Order.findById(req.params.id);\r\n\r\n    if (order) {\r\n      order.isDelivered = true;\r\n      order.deliveredAt = Date.now();\r\n\r\n      const updatedOrder = await order.save();\r\n      res.json(updatedOrder);\r\n    } else {\r\n      res.status(404);\r\n      throw new Error(\"Order not found\");\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n  createOrder,getAllOrders,getUserOrders,countTotalOrders,\r\n  calculateTotalSales,calcualteTotalSalesByDate,\r\n   findOrderById,\r\n    markOrderAsPaid,\r\n     markOrderAsDelivered\r\n\r\n};"
        }
    ]
}