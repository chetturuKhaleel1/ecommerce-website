{
    "sourceFile": "backend/controllers/productController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750345153399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750345153399,
            "name": "Commit-0",
            "content": "\r\nimport asyncHandler from \"../middlewares/asyncHandler.js\";\r\nimport Product from '../models/productModel.js'\r\n\r\n\r\n\r\nconst addProduct =asyncHandler(async (req,res) => {\r\n try {\r\n  const { name, description, price, category, quantity, brand } = req.fields;\r\n// console.log(name);\r\n// console.log(description);\r\n// console.log(price)\r\n// console.log(category)\r\n// console.log(quantity)\r\n// console.log(brand)\r\n\r\n// Validation\r\n    switch (true) {\r\n      case !name:\r\n        return res.json({ error: \"Name is required\" });\r\n      case !brand:\r\n        return res.json({ error: \"Brand is required\" });\r\n      case !description:\r\n        return res.json({ error: \"Description is required\" });\r\n      case !price:\r\n        return res.json({ error: \"Price is required\" });\r\n      case !category:\r\n        return res.json({ error: \"Category is required\" });\r\n      case !quantity:\r\n        return res.json({ error: \"Quantity is required\" });\r\n    }\r\n     const product = new Product({ ...req.fields });\r\n    await product.save();\r\n    res.json(product);\r\n\r\n } catch (error) {\r\n   console.error(error);\r\n    res.status(400).json(error.message);\r\n }\r\n})\r\n\r\n\r\n\r\n//upadte\r\n\r\n\r\nconst updateProductDetails = asyncHandler(async (req, res) => {\r\n  try {\r\n    const { name, description, price, category, quantity, brand } = req.fields;\r\n\r\n    // Validation\r\n    switch (true) {\r\n      case !name:\r\n        return res.json({ error: \"Name is required\" });\r\n      case !brand:\r\n        return res.json({ error: \"Brand is required\" });\r\n      case !description:\r\n        return res.json({ error: \"Description is required\" });\r\n      case !price:\r\n        return res.json({ error: \"Price is required\" });\r\n      case !category:\r\n        return res.json({ error: \"Category is required\" });\r\n      case !quantity:\r\n        return res.json({ error: \"Quantity is required\" });\r\n    }\r\n\r\n    const product = await Product.findByIdAndUpdate(\r\n      req.params.id,\r\n      { ...req.fields },\r\n      { new: true }\r\n    );\r\n\r\n    await product.save();\r\n\r\n    res.json(product);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).json(error.message);\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nconst removeProduct = asyncHandler(async (req, res) => {\r\n  try {\r\n    const product = await Product.findByIdAndDelete(req.params.id);\r\n    res.json(product);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n\r\n\r\nconst fetchProducts = asyncHandler(async (req, res) => {\r\n  try {\r\n    const pageSize = 6;\r\n\r\n    const keyword = req.query.keyword\r\n      ? {\r\n          name: {\r\n            $regex: req.query.keyword,\r\n            $options: \"i\",\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const count = await Product.countDocuments({ ...keyword });\r\n    const products = await Product.find({ ...keyword }).limit(pageSize);\r\n\r\n    res.json({\r\n      products,\r\n      page: 1,\r\n      pages: Math.ceil(count / pageSize),\r\n      hasMore: false,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Server Error\" });\r\n  }\r\n});\r\n\r\n\r\nconst fetchProductById = asyncHandler(async (req, res) => {\r\n  try {\r\n    const product = await Product.findById(req.params.id);\r\n    if (product) {\r\n      return res.json(product);\r\n    } else {\r\n      res.status(404);\r\n      throw new Error(\"Product not found\");\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(404).json({ error: \"Product not found\" });\r\n  }\r\n});\r\n\r\n\r\n\r\nconst fetchAllProducts = asyncHandler(async (req, res) => {\r\n  try {\r\n    const products = await Product.find({})\r\n      .populate(\"category\")\r\n      .limit(12)\r\n      .sort({ createAt: -1 });\r\n\r\n    res.json(products);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Server Error\" });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nconst addProductReview = asyncHandler(async (req, res) => {\r\n  try {\r\n    const { rating, comment } = req.body;\r\n    const product = await Product.findById(req.params.id);\r\n\r\n    if (product) {\r\n      const alreadyReviewed = product.reviews.find(\r\n        (r) => r.user.toString() === req.user._id.toString()\r\n      );\r\n\r\n      if (alreadyReviewed) {\r\n        res.status(400);\r\n        throw new Error(\"Product already reviewed\");\r\n      }\r\n\r\n      const review = {\r\n        name: req.user.username,\r\n        rating: Number(rating),\r\n        comment,\r\n        user: req.user._id,\r\n      };\r\n\r\n      product.reviews.push(review);\r\n\r\n      product.numReviews = product.reviews.length;\r\n\r\n      product.rating =\r\n        product.reviews.reduce((acc, item) => item.rating + acc, 0) /\r\n        product.reviews.length;\r\n\r\n      await product.save();\r\n      res.status(201).json({ message: \"Review added\" });\r\n    } else {\r\n      res.status(404);\r\n      throw new Error(\"Product not found\");\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).json(error.message);\r\n  }\r\n});\r\n\r\n\r\n\r\nconst fetchTopProducts = asyncHandler(async (req, res) => {\r\n  try {\r\n    const products = await Product.find({}).sort({ rating: -1 }).limit(4);\r\n    res.json(products);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).json(error.message);\r\n  }\r\n});\r\n\r\n\r\n\r\nconst fetchNewProducts = asyncHandler(async (req, res) => {\r\n  try {\r\n    const products = await Product.find().sort({ _id: -1 }).limit(5);\r\n    res.json(products);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).json(error.message);\r\n  }\r\n});\r\n\r\nconst filterProducts =asyncHandler(async (req,res) => {\r\n  try {\r\n    \r\n    const {checked,radio} =req.body;\r\n\r\n    let args ={};\r\n\r\n    if(checked.length>0) args.category =checked;\r\n    if(radio.length) args.price ={$gte:radio[0],$lte:radio[1]};\r\n\r\n    const products =await Product.find(args);\r\n    res.json(products);\r\n\r\n\r\n  } catch (error) {\r\n    console.log(error)\r\n    res.status(500).json({error:\"server Error\"})\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport {addProduct,updateProductDetails,removeProduct,fetchProducts,fetchProductById,fetchAllProducts,addProductReview,fetchTopProducts,fetchNewProducts,filterProducts }\r\n\r\n"
        }
    ]
}