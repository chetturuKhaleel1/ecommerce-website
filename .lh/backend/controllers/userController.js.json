{
    "sourceFile": "backend/controllers/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751113950130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751113950130,
            "name": "Commit-0",
            "content": "import User from \"../models/userModel.js\";\r\nimport asyncHandler from \"../middlewares/asyncHandler.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport createToken from \"../utils/createToken.js\";\r\n\r\n\r\nconst createUser = asyncHandler(async (req, res) => {\r\n  const { username, email, password } = req.body || {};\r\n   \r\n  if (!username || !email || !password) {\r\n    throw new Error(\"Please fill all the inputs.\");\r\n  }\r\n\r\n  const userExists = await User.findOne({ email });\r\n  if (userExists) res.status(400).send(\"User already exists\");\r\n\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hashedPassword = await bcrypt.hash(password, salt);\r\n  const newUser = new User({ username, email, password: hashedPassword });\r\n\r\n  try {\r\n    await newUser.save();\r\n    createToken(res, newUser._id);\r\n\r\n    res.status(201).json({\r\n      _id: newUser._id,\r\n      username: newUser.username,\r\n      email: newUser.email,\r\n      isAdmin: newUser.isAdmin,\r\n    });\r\n  } catch (error) {\r\n    res.status(400);\r\n    throw new Error(\"Invalid user data\");\r\n  }\r\n});\r\n\r\nconst loginUser = asyncHandler(async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  console.log(email);\r\n  console.log(password);\r\n\r\n  const existingUser = await User.findOne({ email });\r\n\r\n  if (existingUser) {\r\n    const isPasswordValid = await bcrypt.compare(\r\n      password,\r\n      existingUser.password\r\n    );\r\n\r\n    if (isPasswordValid) {\r\n      createToken(res, existingUser._id);\r\n\r\n      res.status(201).json({\r\n        _id: existingUser._id,\r\n        username: existingUser.username,\r\n        email: existingUser.email,\r\n        isAdmin: existingUser.isAdmin,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n});\r\n\r\nconst logoutCurrentUser = asyncHandler(async (req, res) => {\r\n  res.cookie(\"jwt\", \"\", {\r\n    httpOnly: true,\r\n    expires: new Date(0),\r\n  });\r\n\r\n  res.status(200).json({ message: \"Logged out successfully\" });\r\n});\r\n\r\nconst getAllUsers = asyncHandler(async (req, res) => {\r\n  const users = await User.find({});\r\n  res.json(users);\r\n});\r\n\r\n\r\n//getCurrentUserProfile\r\n\r\nconst getCurrentUserProfile = asyncHandler(async (req, res) => {\r\n  const user = await User.findById(req.user._id);\r\n\r\n  if (user) {\r\n    res.json({\r\n      _id: user._id,\r\n      username: user.username,\r\n      email: user.email,\r\n    });\r\n  } else {\r\n    res.status(404);\r\n    throw new Error(\"User not found.\");\r\n  }\r\n});\r\n\r\n\r\n//upadte \r\n\r\nconst updatCurrentUserProfile =asyncHandler(async (req,res) => {\r\n  const user = await User.findById(req.user._id);\r\n\r\n  if(user){\r\n    user.username =req.body.username || user.username\r\n    user.email =req.body.email || user.email\r\n\r\n    if(req.body.password){\r\n         const salt = await bcrypt.genSalt(10);\r\n      const hashedPassword = await bcrypt.hash(req.body.password, salt);\r\n      user.password = hashedPassword;\r\n\r\n    }\r\n\r\n    const upadteUser =await user.save()\r\n\r\n    res.json ({\r\n      _id:upadteUser._id,\r\n      username :upadteUser.username,\r\n      email:upadteUser.email,\r\n      isAdmin:upadteUser.isAdmin,\r\n\r\n    });\r\n  }else{\r\n    res.status(404);\r\n    throw new Error(\"User not found\");\r\n    \r\n  }\r\n\r\n\r\n});\r\n\r\n\r\n//admin delte and upadte \r\nconst deleteUserById =asyncHandler(async (req,res) => {\r\n  const user =await User.findById(req.params.id)\r\n\r\n//check user or their or not\r\nif (user) {\r\n    if (user.isAdmin) {\r\n      res.status(400);\r\n      throw new Error(\"Cannot delete admin user\");\r\n    }\r\n\r\n    await User.deleteOne({ _id: user._id });\r\n    res.json({ message: \"User removed\" });\r\n  } else {\r\n    res.status(404);\r\n    throw new Error(\"User not found.\");\r\n  }\r\n});\r\n\r\n\r\n//get specific user by id \r\n\r\nconst getUserById = asyncHandler(async (req,res) => {\r\n  //get all user data but not password\r\n  const user =await User.findById(req.params.id).select('-password')\r\n  if(user){\r\n    res.json(user)\r\n  }else{\r\n    res.status(404)\r\n    throw new Error(\"User not found\");\r\n    \r\n  }\r\n})\r\n\r\n//upadte user by  id\r\n\r\nconst updateUserById =asyncHandler(async (req,res) => {\r\n  //get dta \r\n  const user  =await User.findById(req.params.id)\r\n  //if have user vhange user name\r\n  if(user){\r\n    user.username =req.body.username || user.username //get previoudly provoided name\r\n    user.email =req.body.email || user.email\r\n    user.isAdmin =Boolean(req.body.isAdmin)\r\n\r\n\r\n const updatedUser = await user.save();\r\n\r\n    res.json({\r\n      _id: updatedUser._id,\r\n      username: updatedUser.username,\r\n      email: updatedUser.email,\r\n      isAdmin: updatedUser.isAdmin,\r\n    });\r\n  } else {\r\n    res.status(404);\r\n    throw new Error(\"User not found\");\r\n  }\r\n});\r\n\r\n\r\nexport {\r\n  createUser,\r\n  loginUser,\r\n  logoutCurrentUser,\r\n  getAllUsers,\r\ngetCurrentUserProfile,\r\nupdatCurrentUserProfile,\r\ndeleteUserById,\r\ngetUserById,\r\nupdateUserById};\r\n\r\n\r\n\r\n//next front end"
        }
    ]
}